// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A RenderAnchor attached to a ball.
 * The local field allows for an offset in local coordinates taking the ball's orientation into account.
 */
@SuppressWarnings("unused")
public final class BallAnchor extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static BallAnchor getRootAsBallAnchor(ByteBuffer _bb) { return getRootAsBallAnchor(_bb, new BallAnchor()); }
  public static BallAnchor getRootAsBallAnchor(ByteBuffer _bb, BallAnchor obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BallAnchor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the ball.
   */
  public long index() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * An offset in local coordinates.
   * x is forwards, y is left, and z is up.
   */
  public rlbot.flat.Vector3 local() { return local(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 local(rlbot.flat.Vector3 obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startBallAnchor(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addIndex(FlatBufferBuilder builder, long index) { builder.addInt(0, (int) index, (int) 0L); }
  public static void addLocal(FlatBufferBuilder builder, int localOffset) { builder.addStruct(1, localOffset, 0); }
  public static int endBallAnchor(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // local
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BallAnchor get(int j) { return get(new BallAnchor(), j); }
    public BallAnchor get(BallAnchor obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BallAnchorT unpack() {
    BallAnchorT _o = new BallAnchorT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BallAnchorT _o) {
    long _oIndex = index();
    _o.setIndex(_oIndex);
    if (local() != null) local().unpackTo(_o.getLocal());
    else _o.setLocal(null);
  }
  public static int pack(FlatBufferBuilder builder, BallAnchorT _o) {
    if (_o == null) return 0;
    startBallAnchor(builder);
    addIndex(builder, _o.getIndex());
    addLocal(builder, rlbot.flat.Vector3.pack(builder, _o.getLocal()));
    return endBallAnchor(builder);
  }
}

