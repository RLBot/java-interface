// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A combination of button presses and analog steering values like those produced by a physical controller or keyboard.
 * This is sent by bots each tick to RLBot to indicate what they want to do that tick.
 * For example, if you want to hold the jump button for 20 ticks, then you must send 20 controller states where jump is true.
 * Remember to send controller states with jump set to false to let go of the jump button afterwards.
 */
@SuppressWarnings("unused")
public final class ControllerState extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ControllerState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * -1 for full reverse, 1 for full forward.
   */
  public float throttle() { return bb.getFloat(bb_pos + 0); }
  /**
   * -1 for full left, 1 for full right.
   */
  public float steer() { return bb.getFloat(bb_pos + 4); }
  /**
   * -1 for nose down, 1 for nose up.
   */
  public float pitch() { return bb.getFloat(bb_pos + 8); }
  /**
   * -1 for full left, 1 for full right.
   */
  public float yaw() { return bb.getFloat(bb_pos + 12); }
  /**
   * -1 for roll left, 1 for roll right.
   */
  public float roll() { return bb.getFloat(bb_pos + 16); }
  /**
   * True if you want to press the jump button.
   */
  public boolean jump() { return 0!=bb.get(bb_pos + 20); }
  /**
   * True if you want to press the boost button.
   */
  public boolean boost() { return 0!=bb.get(bb_pos + 21); }
  /**
   * True if you want to press the handbrake button.
   */
  public boolean handbrake() { return 0!=bb.get(bb_pos + 22); }
  /**
   * True if you want to press the 'use item' button. Used in Rumble and other game modes.
   */
  public boolean useItem() { return 0!=bb.get(bb_pos + 23); }

  public static int createControllerState(FlatBufferBuilder builder, float throttle, float steer, float pitch, float yaw, float roll, boolean jump, boolean boost, boolean handbrake, boolean useItem) {
    builder.prep(4, 24);
    builder.putBoolean(useItem);
    builder.putBoolean(handbrake);
    builder.putBoolean(boost);
    builder.putBoolean(jump);
    builder.putFloat(roll);
    builder.putFloat(yaw);
    builder.putFloat(pitch);
    builder.putFloat(steer);
    builder.putFloat(throttle);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ControllerState get(int j) { return get(new ControllerState(), j); }
    public ControllerState get(ControllerState obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public ControllerStateT unpack() {
    ControllerStateT _o = new ControllerStateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ControllerStateT _o) {
    float _oThrottle = throttle();
    _o.setThrottle(_oThrottle);
    float _oSteer = steer();
    _o.setSteer(_oSteer);
    float _oPitch = pitch();
    _o.setPitch(_oPitch);
    float _oYaw = yaw();
    _o.setYaw(_oYaw);
    float _oRoll = roll();
    _o.setRoll(_oRoll);
    boolean _oJump = jump();
    _o.setJump(_oJump);
    boolean _oBoost = boost();
    _o.setBoost(_oBoost);
    boolean _oHandbrake = handbrake();
    _o.setHandbrake(_oHandbrake);
    boolean _oUseItem = useItem();
    _o.setUseItem(_oUseItem);
  }
  public static int pack(FlatBufferBuilder builder, ControllerStateT _o) {
    if (_o == null) return 0;
    return createControllerState(
      builder,
      _o.getThrottle(),
      _o.getSteer(),
      _o.getPitch(),
      _o.getYaw(),
      _o.getRoll(),
      _o.getJump(),
      _o.getBoost(),
      _o.getHandbrake(),
      _o.getUseItem());
  }
}

