// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A 3D vector where x, y, and z can be null.
 * Used for game state setting to define which part of a vector should change.
 * If a component is null, then the component will keep its current value.
 */
@SuppressWarnings("unused")
public final class Vector3Partial extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Vector3Partial getRootAsVector3Partial(ByteBuffer _bb) { return getRootAsVector3Partial(_bb, new Vector3Partial()); }
  public static Vector3Partial getRootAsVector3Partial(ByteBuffer _bb, Vector3Partial obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Vector3Partial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.Float x() { return x(new rlbot.flat.Float()); }
  public rlbot.flat.Float x(rlbot.flat.Float obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public rlbot.flat.Float y() { return y(new rlbot.flat.Float()); }
  public rlbot.flat.Float y(rlbot.flat.Float obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public rlbot.flat.Float z() { return z(new rlbot.flat.Float()); }
  public rlbot.flat.Float z(rlbot.flat.Float obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startVector3Partial(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addX(FlatBufferBuilder builder, int xOffset) { builder.addStruct(0, xOffset, 0); }
  public static void addY(FlatBufferBuilder builder, int yOffset) { builder.addStruct(1, yOffset, 0); }
  public static void addZ(FlatBufferBuilder builder, int zOffset) { builder.addStruct(2, zOffset, 0); }
  public static int endVector3Partial(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Vector3Partial get(int j) { return get(new Vector3Partial(), j); }
    public Vector3Partial get(Vector3Partial obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public Vector3PartialT unpack() {
    Vector3PartialT _o = new Vector3PartialT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Vector3PartialT _o) {
    if (x() != null) x().unpackTo(_o.getX());
    else _o.setX(null);
    if (y() != null) y().unpackTo(_o.getY());
    else _o.setY(null);
    if (z() != null) z().unpackTo(_o.getZ());
    else _o.setZ(null);
  }
  public static int pack(FlatBufferBuilder builder, Vector3PartialT _o) {
    if (_o == null) return 0;
    startVector3Partial(builder);
    addX(builder, rlbot.flat.Float.pack(builder, _o.getX()));
    addY(builder, rlbot.flat.Float.pack(builder, _o.getY()));
    addZ(builder, rlbot.flat.Float.pack(builder, _o.getZ()));
    return endVector3Partial(builder);
  }
}

