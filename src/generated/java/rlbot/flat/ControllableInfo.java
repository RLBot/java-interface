// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Information about a car that the client can control.
 */
@SuppressWarnings("unused")
public final class ControllableInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ControllableInfo getRootAsControllableInfo(ByteBuffer _bb) { return getRootAsControllableInfo(_bb, new ControllableInfo()); }
  public static ControllableInfo getRootAsControllableInfo(ByteBuffer _bb, ControllableInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ControllableInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the bot/script.
   */
  public long index() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The id of the bot/script.
   * This value is mostly used internally to keep track of participants in the match.
   * The id can be used to find the corresponding PlayerConfiguration in the MatchConfiguration.
   */
  public int identifier() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createControllableInfo(FlatBufferBuilder builder,
      long index,
      int identifier) {
    builder.startTable(2);
    ControllableInfo.addIdentifier(builder, identifier);
    ControllableInfo.addIndex(builder, index);
    return ControllableInfo.endControllableInfo(builder);
  }

  public static void startControllableInfo(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addIndex(FlatBufferBuilder builder, long index) { builder.addInt(0, (int) index, (int) 0L); }
  public static void addIdentifier(FlatBufferBuilder builder, int identifier) { builder.addInt(1, identifier, 0); }
  public static int endControllableInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ControllableInfo get(int j) { return get(new ControllableInfo(), j); }
    public ControllableInfo get(ControllableInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ControllableInfoT unpack() {
    ControllableInfoT _o = new ControllableInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ControllableInfoT _o) {
    long _oIndex = index();
    _o.setIndex(_oIndex);
    int _oIdentifier = identifier();
    _o.setIdentifier(_oIdentifier);
  }
  public static int pack(FlatBufferBuilder builder, ControllableInfoT _o) {
    if (_o == null) return 0;
    return createControllableInfo(
      builder,
      _o.getIndex(),
      _o.getIdentifier());
  }
}

