// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class MatchInfoT {
  private float secondsElapsed;
  private float gameTimeRemaining;
  private boolean isOvertime;
  private boolean isUnlimitedTime;
  private int matchPhase;
  private float worldGravityZ;
  private float gameSpeed;
  private long lastSpectated;
  private long frameNum;

  public float getSecondsElapsed() { return secondsElapsed; }

  public void setSecondsElapsed(float secondsElapsed) { this.secondsElapsed = secondsElapsed; }

  public float getGameTimeRemaining() { return gameTimeRemaining; }

  public void setGameTimeRemaining(float gameTimeRemaining) { this.gameTimeRemaining = gameTimeRemaining; }

  public boolean getIsOvertime() { return isOvertime; }

  public void setIsOvertime(boolean isOvertime) { this.isOvertime = isOvertime; }

  public boolean getIsUnlimitedTime() { return isUnlimitedTime; }

  public void setIsUnlimitedTime(boolean isUnlimitedTime) { this.isUnlimitedTime = isUnlimitedTime; }

  public int getMatchPhase() { return matchPhase; }

  public void setMatchPhase(int matchPhase) { this.matchPhase = matchPhase; }

  public float getWorldGravityZ() { return worldGravityZ; }

  public void setWorldGravityZ(float worldGravityZ) { this.worldGravityZ = worldGravityZ; }

  public float getGameSpeed() { return gameSpeed; }

  public void setGameSpeed(float gameSpeed) { this.gameSpeed = gameSpeed; }

  public long getLastSpectated() { return lastSpectated; }

  public void setLastSpectated(long lastSpectated) { this.lastSpectated = lastSpectated; }

  public long getFrameNum() { return frameNum; }

  public void setFrameNum(long frameNum) { this.frameNum = frameNum; }


  public MatchInfoT() {
    this.secondsElapsed = 0.0f;
    this.gameTimeRemaining = 0.0f;
    this.isOvertime = false;
    this.isUnlimitedTime = false;
    this.matchPhase = 0;
    this.worldGravityZ = 0.0f;
    this.gameSpeed = 0.0f;
    this.lastSpectated = 0L;
    this.frameNum = 0L;
  }
}

