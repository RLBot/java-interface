// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A prediction of a ball's trajectory, assuming no collision with cars.
 */
@SuppressWarnings("unused")
public final class BallPrediction extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static BallPrediction getRootAsBallPrediction(ByteBuffer _bb) { return getRootAsBallPrediction(_bb, new BallPrediction()); }
  public static BallPrediction getRootAsBallPrediction(ByteBuffer _bb, BallPrediction obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BallPrediction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * A list of predicted states of the ball at specific times in the future, assuming no collision with cars.
   * The beginning of the list is now, and the end is 6 seconds into the future.
   * The prediction is made at 120 Hz, resulting in 720 entries.
   */
  public rlbot.flat.PredictionSlice slices(int j) { return slices(new rlbot.flat.PredictionSlice(), j); }
  public rlbot.flat.PredictionSlice slices(rlbot.flat.PredictionSlice obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 52, bb) : null; }
  public int slicesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.PredictionSlice.Vector slicesVector() { return slicesVector(new rlbot.flat.PredictionSlice.Vector()); }
  public rlbot.flat.PredictionSlice.Vector slicesVector(rlbot.flat.PredictionSlice.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 52, bb) : null; }

  public static int createBallPrediction(FlatBufferBuilder builder,
      int slicesOffset) {
    builder.startTable(1);
    BallPrediction.addSlices(builder, slicesOffset);
    return BallPrediction.endBallPrediction(builder);
  }

  public static void startBallPrediction(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addSlices(FlatBufferBuilder builder, int slicesOffset) { builder.addOffset(0, slicesOffset, 0); }
  public static void startSlicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(52, numElems, 4); }
  public static int endBallPrediction(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // slices
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BallPrediction get(int j) { return get(new BallPrediction(), j); }
    public BallPrediction get(BallPrediction obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BallPredictionT unpack() {
    BallPredictionT _o = new BallPredictionT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BallPredictionT _o) {
    rlbot.flat.PredictionSliceT[] _oSlices = new rlbot.flat.PredictionSliceT[slicesLength()];
    for (int _j = 0; _j < slicesLength(); ++_j) {_oSlices[_j] = (slices(_j) != null ? slices(_j).unpack() : null);}
    _o.setSlices(_oSlices);
  }
  public static int pack(FlatBufferBuilder builder, BallPredictionT _o) {
    if (_o == null) return 0;
    int _slices = 0;
    rlbot.flat.PredictionSliceT[] _oSlices = _o.getSlices();
    if (_oSlices != null) {
      int _unused_offset = 0;
      startSlicesVector(builder, _oSlices.length);
      for (int _j = _oSlices.length - 1; _j >=0; _j--) { _unused_offset = rlbot.flat.PredictionSlice.pack(builder, _oSlices[_j]);}
      _slices = builder.endVector();
    }
    return createBallPrediction(
      builder,
      _slices);
  }
}

