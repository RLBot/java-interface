// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A client message to start a match using a path to a match config file.
 */
@SuppressWarnings("unused")
public final class StartCommand extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static StartCommand getRootAsStartCommand(ByteBuffer _bb) { return getRootAsStartCommand(_bb, new StartCommand()); }
  public static StartCommand getRootAsStartCommand(ByteBuffer _bb, StartCommand obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StartCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String configPath() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer configPathAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer configPathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createStartCommand(FlatBufferBuilder builder,
      int configPathOffset) {
    builder.startTable(1);
    StartCommand.addConfigPath(builder, configPathOffset);
    return StartCommand.endStartCommand(builder);
  }

  public static void startStartCommand(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addConfigPath(FlatBufferBuilder builder, int configPathOffset) { builder.addOffset(0, configPathOffset, 0); }
  public static int endStartCommand(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // config_path
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StartCommand get(int j) { return get(new StartCommand(), j); }
    public StartCommand get(StartCommand obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public StartCommandT unpack() {
    StartCommandT _o = new StartCommandT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(StartCommandT _o) {
    String _oConfigPath = configPath();
    _o.setConfigPath(_oConfigPath);
  }
  public static int pack(FlatBufferBuilder builder, StartCommandT _o) {
    if (_o == null) return 0;
    int _configPath = _o.getConfigPath() == null ? 0 : builder.createString(_o.getConfigPath());
    return createStartCommand(
      builder,
      _configPath);
  }
}

