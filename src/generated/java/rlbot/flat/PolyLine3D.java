// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A RenderMessage for a line in 3D space going through a series of points.
 */
@SuppressWarnings("unused")
public final class PolyLine3D extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PolyLine3D getRootAsPolyLine3D(ByteBuffer _bb) { return getRootAsPolyLine3D(_bb, new PolyLine3D()); }
  public static PolyLine3D getRootAsPolyLine3D(ByteBuffer _bb, PolyLine3D obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PolyLine3D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.Vector3 points(int j) { return points(new rlbot.flat.Vector3(), j); }
  public rlbot.flat.Vector3 points(rlbot.flat.Vector3 obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 12, bb) : null; }
  public int pointsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.Vector3.Vector pointsVector() { return pointsVector(new rlbot.flat.Vector3.Vector()); }
  public rlbot.flat.Vector3.Vector pointsVector(rlbot.flat.Vector3.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 12, bb) : null; }
  public rlbot.flat.Color color() { return color(new rlbot.flat.Color()); }
  public rlbot.flat.Color color(rlbot.flat.Color obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startPolyLine3D(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(0, pointsOffset, 0); }
  public static void startPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(12, numElems, 4); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addStruct(1, colorOffset, 0); }
  public static int endPolyLine3D(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // points
    builder.required(o, 6);  // color
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PolyLine3D get(int j) { return get(new PolyLine3D(), j); }
    public PolyLine3D get(PolyLine3D obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PolyLine3DT unpack() {
    PolyLine3DT _o = new PolyLine3DT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PolyLine3DT _o) {
    rlbot.flat.Vector3T[] _oPoints = new rlbot.flat.Vector3T[pointsLength()];
    for (int _j = 0; _j < pointsLength(); ++_j) {_oPoints[_j] = (points(_j) != null ? points(_j).unpack() : null);}
    _o.setPoints(_oPoints);
    if (color() != null) color().unpackTo(_o.getColor());
    else _o.setColor(null);
  }
  public static int pack(FlatBufferBuilder builder, PolyLine3DT _o) {
    if (_o == null) return 0;
    int _points = 0;
    rlbot.flat.Vector3T[] _oPoints = _o.getPoints();
    if (_oPoints != null) {
      int _unused_offset = 0;
      startPointsVector(builder, _oPoints.length);
      for (int _j = _oPoints.length - 1; _j >=0; _j--) { _unused_offset = rlbot.flat.Vector3.pack(builder, _oPoints[_j]);}
      _points = builder.endVector();
    }
    startPolyLine3D(builder);
    addPoints(builder, _points);
    addColor(builder, rlbot.flat.Color.pack(builder, _o.getColor()));
    return endPolyLine3D(builder);
  }
}

