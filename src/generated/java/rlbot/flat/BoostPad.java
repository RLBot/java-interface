// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Static information about a boost pad such as location and size.
 */
@SuppressWarnings("unused")
public final class BoostPad extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static BoostPad getRootAsBoostPad(ByteBuffer _bb) { return getRootAsBoostPad(_bb, new BoostPad()); }
  public static BoostPad getRootAsBoostPad(ByteBuffer _bb, BoostPad obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BoostPad __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The location of the boost pad.
   */
  public rlbot.flat.Vector3 location() { return location(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 location(rlbot.flat.Vector3 obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * Whether the boost pad provides a full tank of boost.
   * A big boost pad provides 100 boost and respawns in 10 seconds.
   * A small boost pad provides 12 boost and respawns in 4 seconds.
   */
  public boolean isFullBoost() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static void startBoostPad(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addStruct(0, locationOffset, 0); }
  public static void addIsFullBoost(FlatBufferBuilder builder, boolean isFullBoost) { builder.addBoolean(1, isFullBoost, false); }
  public static int endBoostPad(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // location
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BoostPad get(int j) { return get(new BoostPad(), j); }
    public BoostPad get(BoostPad obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BoostPadT unpack() {
    BoostPadT _o = new BoostPadT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BoostPadT _o) {
    if (location() != null) location().unpackTo(_o.getLocation());
    else _o.setLocation(null);
    boolean _oIsFullBoost = isFullBoost();
    _o.setIsFullBoost(_oIsFullBoost);
  }
  public static int pack(FlatBufferBuilder builder, BoostPadT _o) {
    if (_o == null) return 0;
    startBoostPad(builder);
    addLocation(builder, rlbot.flat.Vector3.pack(builder, _o.getLocation()));
    addIsFullBoost(builder, _o.getIsFullBoost());
    return endBoostPad(builder);
  }
}

