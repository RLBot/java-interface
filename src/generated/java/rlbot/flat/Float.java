// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A floating point value located in a separate struct allowing for optional floats elsewhere.
 */
@SuppressWarnings("unused")
public final class Float extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float val() { return bb.getFloat(bb_pos + 0); }

  public static int createFloat(FlatBufferBuilder builder, float val) {
    builder.prep(4, 4);
    builder.putFloat(val);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Float get(int j) { return get(new Float(), j); }
    public Float get(Float obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public FloatT unpack() {
    FloatT _o = new FloatT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FloatT _o) {
    float _oVal = val();
    _o.setVal(_oVal);
  }
  public static int pack(FlatBufferBuilder builder, FloatT _o) {
    if (_o == null) return 0;
    return createFloat(
      builder,
      _o.getVal());
  }
}

