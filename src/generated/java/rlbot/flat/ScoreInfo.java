// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A collection of values shown on the scoreboard (and a few more).
 */
@SuppressWarnings("unused")
public final class ScoreInfo extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ScoreInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The accumulated score, roughly indicating how well a player performs.
   */
  public long score() { return (long)bb.getInt(bb_pos + 0) & 0xFFFFFFFFL; }
  /**
   * Number of goals scored.
   */
  public long goals() { return (long)bb.getInt(bb_pos + 4) & 0xFFFFFFFFL; }
  /**
   * Number of own-goals scored.
   */
  public long ownGoals() { return (long)bb.getInt(bb_pos + 8) & 0xFFFFFFFFL; }
  /**
   * Number of goals assisted.
   */
  public long assists() { return (long)bb.getInt(bb_pos + 12) & 0xFFFFFFFFL; }
  /**
   * Number of shots saved.
   */
  public long saves() { return (long)bb.getInt(bb_pos + 16) & 0xFFFFFFFFL; }
  /**
   * Number of shots on opponent goal.
   */
  public long shots() { return (long)bb.getInt(bb_pos + 20) & 0xFFFFFFFFL; }
  /**
   * Number of demolitions made.
   */
  public long demolitions() { return (long)bb.getInt(bb_pos + 24) & 0xFFFFFFFFL; }

  public static int createScoreInfo(FlatBufferBuilder builder, long score, long goals, long ownGoals, long assists, long saves, long shots, long demolitions) {
    builder.prep(4, 28);
    builder.putInt((int) demolitions);
    builder.putInt((int) shots);
    builder.putInt((int) saves);
    builder.putInt((int) assists);
    builder.putInt((int) ownGoals);
    builder.putInt((int) goals);
    builder.putInt((int) score);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ScoreInfo get(int j) { return get(new ScoreInfo(), j); }
    public ScoreInfo get(ScoreInfo obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public ScoreInfoT unpack() {
    ScoreInfoT _o = new ScoreInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ScoreInfoT _o) {
    long _oScore = score();
    _o.setScore(_oScore);
    long _oGoals = goals();
    _o.setGoals(_oGoals);
    long _oOwnGoals = ownGoals();
    _o.setOwnGoals(_oOwnGoals);
    long _oAssists = assists();
    _o.setAssists(_oAssists);
    long _oSaves = saves();
    _o.setSaves(_oSaves);
    long _oShots = shots();
    _o.setShots(_oShots);
    long _oDemolitions = demolitions();
    _o.setDemolitions(_oDemolitions);
  }
  public static int pack(FlatBufferBuilder builder, ScoreInfoT _o) {
    if (_o == null) return 0;
    return createScoreInfo(
      builder,
      _o.getScore(),
      _o.getGoals(),
      _o.getOwnGoals(),
      _o.getAssists(),
      _o.getSaves(),
      _o.getShots(),
      _o.getDemolitions());
  }
}

