// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Sent to core to indicate that you want to disconnect.
 * Sent from core to indicate that you should exit.
 */
@SuppressWarnings("unused")
public final class DisconnectSignal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static DisconnectSignal getRootAsDisconnectSignal(ByteBuffer _bb) { return getRootAsDisconnectSignal(_bb, new DisconnectSignal()); }
  public static DisconnectSignal getRootAsDisconnectSignal(ByteBuffer _bb, DisconnectSignal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DisconnectSignal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void startDisconnectSignal(FlatBufferBuilder builder) { builder.startTable(0); }
  public static int endDisconnectSignal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DisconnectSignal get(int j) { return get(new DisconnectSignal(), j); }
    public DisconnectSignal get(DisconnectSignal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DisconnectSignalT unpack() {
    DisconnectSignalT _o = new DisconnectSignalT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DisconnectSignalT _o) {
  }
  public static int pack(FlatBufferBuilder builder, DisconnectSignalT _o) {
    if (_o == null) return 0;
    startDisconnectSignal(builder);
    return endDisconnectSignal(builder);
  }
}

