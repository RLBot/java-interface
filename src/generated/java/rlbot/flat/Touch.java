// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Information about a ball touch.
 */
@SuppressWarnings("unused")
public final class Touch extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Touch getRootAsTouch(ByteBuffer _bb) { return getRootAsTouch(_bb, new Touch()); }
  public static Touch getRootAsTouch(ByteBuffer _bb, Touch obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Touch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Seconds that had elapsed in the game when the touch occurred.
   */
  public float gameSeconds() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The point of contact for the touch.
   */
  public rlbot.flat.Vector3 location() { return location(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 location(rlbot.flat.Vector3 obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The direction of the touch as a unit vector pointing from the point of contact towards the center of the ball.
   */
  public rlbot.flat.Vector3 normal() { return normal(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 normal(rlbot.flat.Vector3 obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The index of the ball that was touched (in case there are multiple balls).
   */
  public long ballIndex() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static void startTouch(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addGameSeconds(FlatBufferBuilder builder, float gameSeconds) { builder.addFloat(0, gameSeconds, 0.0f); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addStruct(1, locationOffset, 0); }
  public static void addNormal(FlatBufferBuilder builder, int normalOffset) { builder.addStruct(2, normalOffset, 0); }
  public static void addBallIndex(FlatBufferBuilder builder, long ballIndex) { builder.addInt(3, (int) ballIndex, (int) 0L); }
  public static int endTouch(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // location
    builder.required(o, 8);  // normal
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Touch get(int j) { return get(new Touch(), j); }
    public Touch get(Touch obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TouchT unpack() {
    TouchT _o = new TouchT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TouchT _o) {
    float _oGameSeconds = gameSeconds();
    _o.setGameSeconds(_oGameSeconds);
    if (location() != null) location().unpackTo(_o.getLocation());
    else _o.setLocation(null);
    if (normal() != null) normal().unpackTo(_o.getNormal());
    else _o.setNormal(null);
    long _oBallIndex = ballIndex();
    _o.setBallIndex(_oBallIndex);
  }
  public static int pack(FlatBufferBuilder builder, TouchT _o) {
    if (_o == null) return 0;
    startTouch(builder);
    addGameSeconds(builder, _o.getGameSeconds());
    addLocation(builder, rlbot.flat.Vector3.pack(builder, _o.getLocation()));
    addNormal(builder, rlbot.flat.Vector3.pack(builder, _o.getNormal()));
    addBallIndex(builder, _o.getBallIndex());
    return endTouch(builder);
  }
}

