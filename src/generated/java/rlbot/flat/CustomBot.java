// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A bot controlled by the RLBot framework.
 */
@SuppressWarnings("unused")
public final class CustomBot extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static CustomBot getRootAsCustomBot(ByteBuffer _bb) { return getRootAsCustomBot(_bb, new CustomBot()); }
  public static CustomBot getRootAsCustomBot(ByteBuffer _bb, CustomBot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CustomBot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Requested bot name. When match start, RLBot will ensure each bot has a unique name; bots with
   * duplicate names will be renamed with a suffix like `(2)`
   */
  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The root directory of the bot and the working directory for the run command.
   */
  public String rootDir() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rootDirAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer rootDirInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The console command that starts this bot.
   */
  public String runCommand() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer runCommandAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer runCommandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The loadout of the player.
   */
  public rlbot.flat.PlayerLoadout loadout() { return loadout(new rlbot.flat.PlayerLoadout()); }
  public rlbot.flat.PlayerLoadout loadout(rlbot.flat.PlayerLoadout obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * A unique user-defined string that is used to connect clients to the right players/scripts.
   * If a bot/script has a run command, RLBot will pass this agent id to the process using an environment variable, RLBOT_AGENT_ID.
   * Upon connecting the process announces that it is responsible for this agent id and RLBot will pair the two.
   * The recommended format for agent ids is "developer_name/bot_name".
   */
  public String agentId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agentIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer agentIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Whether this player is part of a hivemind bot where all players/cars are controlled by the same process.
   * Players in the hivemind must have the same name, team, run command, and agent id.
   */
  public boolean hivemind() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createCustomBot(FlatBufferBuilder builder,
      int nameOffset,
      int rootDirOffset,
      int runCommandOffset,
      int loadoutOffset,
      int agentIdOffset,
      boolean hivemind) {
    builder.startTable(6);
    CustomBot.addAgentId(builder, agentIdOffset);
    CustomBot.addLoadout(builder, loadoutOffset);
    CustomBot.addRunCommand(builder, runCommandOffset);
    CustomBot.addRootDir(builder, rootDirOffset);
    CustomBot.addName(builder, nameOffset);
    CustomBot.addHivemind(builder, hivemind);
    return CustomBot.endCustomBot(builder);
  }

  public static void startCustomBot(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addRootDir(FlatBufferBuilder builder, int rootDirOffset) { builder.addOffset(1, rootDirOffset, 0); }
  public static void addRunCommand(FlatBufferBuilder builder, int runCommandOffset) { builder.addOffset(2, runCommandOffset, 0); }
  public static void addLoadout(FlatBufferBuilder builder, int loadoutOffset) { builder.addOffset(3, loadoutOffset, 0); }
  public static void addAgentId(FlatBufferBuilder builder, int agentIdOffset) { builder.addOffset(4, agentIdOffset, 0); }
  public static void addHivemind(FlatBufferBuilder builder, boolean hivemind) { builder.addBoolean(5, hivemind, false); }
  public static int endCustomBot(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // name
    builder.required(o, 6);  // root_dir
    builder.required(o, 8);  // run_command
    builder.required(o, 12);  // agent_id
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CustomBot get(int j) { return get(new CustomBot(), j); }
    public CustomBot get(CustomBot obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CustomBotT unpack() {
    CustomBotT _o = new CustomBotT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CustomBotT _o) {
    String _oName = name();
    _o.setName(_oName);
    String _oRootDir = rootDir();
    _o.setRootDir(_oRootDir);
    String _oRunCommand = runCommand();
    _o.setRunCommand(_oRunCommand);
    if (loadout() != null) _o.setLoadout(loadout().unpack());
    else _o.setLoadout(null);
    String _oAgentId = agentId();
    _o.setAgentId(_oAgentId);
    boolean _oHivemind = hivemind();
    _o.setHivemind(_oHivemind);
  }
  public static int pack(FlatBufferBuilder builder, CustomBotT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _rootDir = _o.getRootDir() == null ? 0 : builder.createString(_o.getRootDir());
    int _runCommand = _o.getRunCommand() == null ? 0 : builder.createString(_o.getRunCommand());
    int _loadout = _o.getLoadout() == null ? 0 : rlbot.flat.PlayerLoadout.pack(builder, _o.getLoadout());
    int _agentId = _o.getAgentId() == null ? 0 : builder.createString(_o.getAgentId());
    return createCustomBot(
      builder,
      _name,
      _rootDir,
      _runCommand,
      _loadout,
      _agentId,
      _o.getHivemind());
  }
}

