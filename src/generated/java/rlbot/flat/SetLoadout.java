// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A client message to change the loadout of a car.
 * If sent before the ready message, this simply sets the loadout of the car.
 * If sent after the ready message and if game state setting is enabled, this will respawn the car with the new loadout.
 * Bots can only set the loadout of their own car(s).
 */
@SuppressWarnings("unused")
public final class SetLoadout extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static SetLoadout getRootAsSetLoadout(ByteBuffer _bb) { return getRootAsSetLoadout(_bb, new SetLoadout()); }
  public static SetLoadout getRootAsSetLoadout(ByteBuffer _bb, SetLoadout obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SetLoadout __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the car to change loadout off.
   */
  public long index() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The new loadout of the car.
   */
  public rlbot.flat.PlayerLoadout loadout() { return loadout(new rlbot.flat.PlayerLoadout()); }
  public rlbot.flat.PlayerLoadout loadout(rlbot.flat.PlayerLoadout obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSetLoadout(FlatBufferBuilder builder,
      long index,
      int loadoutOffset) {
    builder.startTable(2);
    SetLoadout.addLoadout(builder, loadoutOffset);
    SetLoadout.addIndex(builder, index);
    return SetLoadout.endSetLoadout(builder);
  }

  public static void startSetLoadout(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addIndex(FlatBufferBuilder builder, long index) { builder.addInt(0, (int) index, (int) 0L); }
  public static void addLoadout(FlatBufferBuilder builder, int loadoutOffset) { builder.addOffset(1, loadoutOffset, 0); }
  public static int endSetLoadout(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // loadout
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SetLoadout get(int j) { return get(new SetLoadout(), j); }
    public SetLoadout get(SetLoadout obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SetLoadoutT unpack() {
    SetLoadoutT _o = new SetLoadoutT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SetLoadoutT _o) {
    long _oIndex = index();
    _o.setIndex(_oIndex);
    if (loadout() != null) _o.setLoadout(loadout().unpack());
    else _o.setLoadout(null);
  }
  public static int pack(FlatBufferBuilder builder, SetLoadoutT _o) {
    if (_o == null) return 0;
    int _loadout = _o.getLoadout() == null ? 0 : rlbot.flat.PlayerLoadout.pack(builder, _o.getLoadout());
    return createSetLoadout(
      builder,
      _o.getIndex(),
      _loadout);
  }
}

