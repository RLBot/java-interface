// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A player index and the controller state of that player.
 * Used to indicate what the player is doing this tick.
 */
@SuppressWarnings("unused")
public final class PlayerInput extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PlayerInput getRootAsPlayerInput(ByteBuffer _bb) { return getRootAsPlayerInput(_bb, new PlayerInput()); }
  public static PlayerInput getRootAsPlayerInput(ByteBuffer _bb, PlayerInput obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long playerIndex() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public rlbot.flat.ControllerState controllerState() { return controllerState(new rlbot.flat.ControllerState()); }
  public rlbot.flat.ControllerState controllerState(rlbot.flat.ControllerState obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startPlayerInput(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPlayerIndex(FlatBufferBuilder builder, long playerIndex) { builder.addInt(0, (int) playerIndex, (int) 0L); }
  public static void addControllerState(FlatBufferBuilder builder, int controllerStateOffset) { builder.addStruct(1, controllerStateOffset, 0); }
  public static int endPlayerInput(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // controller_state
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerInput get(int j) { return get(new PlayerInput(), j); }
    public PlayerInput get(PlayerInput obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlayerInputT unpack() {
    PlayerInputT _o = new PlayerInputT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlayerInputT _o) {
    long _oPlayerIndex = playerIndex();
    _o.setPlayerIndex(_oPlayerIndex);
    if (controllerState() != null) controllerState().unpackTo(_o.getControllerState());
    else _o.setControllerState(null);
  }
  public static int pack(FlatBufferBuilder builder, PlayerInputT _o) {
    if (_o == null) return 0;
    startPlayerInput(builder);
    addPlayerIndex(builder, _o.getPlayerIndex());
    addControllerState(builder, rlbot.flat.ControllerState.pack(builder, _o.getControllerState()));
    return endPlayerInput(builder);
  }
}

