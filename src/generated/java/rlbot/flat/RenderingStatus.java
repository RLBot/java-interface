// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * As an interface message, this requests for a specificed agent to have its ability to render changed.
 * This changed will then be broadcasted to all current connections as a core message.
 * Does nothing if rendering has been completely disabled.
 */
@SuppressWarnings("unused")
public final class RenderingStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static RenderingStatus getRootAsRenderingStatus(ByteBuffer _bb) { return getRootAsRenderingStatus(_bb, new RenderingStatus()); }
  public static RenderingStatus getRootAsRenderingStatus(ByteBuffer _bb, RenderingStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RenderingStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * If `is_bot`, this is the index of the bot in `GamePacket` that has been updated.
   * Otherwise, this is the index of the script in `MatchConfiguration` that has been updated.
   */
  public long index() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Identifies if the index is that of a bot or a script
   */
  public boolean isBot() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * If rendering is now enabled or disabled for the specific agent
   */
  public boolean status() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createRenderingStatus(FlatBufferBuilder builder,
      long index,
      boolean isBot,
      boolean status) {
    builder.startTable(3);
    RenderingStatus.addIndex(builder, index);
    RenderingStatus.addStatus(builder, status);
    RenderingStatus.addIsBot(builder, isBot);
    return RenderingStatus.endRenderingStatus(builder);
  }

  public static void startRenderingStatus(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addIndex(FlatBufferBuilder builder, long index) { builder.addInt(0, (int) index, (int) 0L); }
  public static void addIsBot(FlatBufferBuilder builder, boolean isBot) { builder.addBoolean(1, isBot, false); }
  public static void addStatus(FlatBufferBuilder builder, boolean status) { builder.addBoolean(2, status, false); }
  public static int endRenderingStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RenderingStatus get(int j) { return get(new RenderingStatus(), j); }
    public RenderingStatus get(RenderingStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RenderingStatusT unpack() {
    RenderingStatusT _o = new RenderingStatusT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RenderingStatusT _o) {
    long _oIndex = index();
    _o.setIndex(_oIndex);
    boolean _oIsBot = isBot();
    _o.setIsBot(_oIsBot);
    boolean _oStatus = status();
    _o.setStatus(_oStatus);
  }
  public static int pack(FlatBufferBuilder builder, RenderingStatusT _o) {
    if (_o == null) return 0;
    return createRenderingStatus(
      builder,
      _o.getIndex(),
      _o.getIsBot(),
      _o.getStatus());
  }
}

