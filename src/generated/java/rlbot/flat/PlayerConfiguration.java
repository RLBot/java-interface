// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A PlayerConfiguration defines a player of a match.
 */
@SuppressWarnings("unused")
public final class PlayerConfiguration extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PlayerConfiguration getRootAsPlayerConfiguration(ByteBuffer _bb) { return getRootAsPlayerConfiguration(_bb, new PlayerConfiguration()); }
  public static PlayerConfiguration getRootAsPlayerConfiguration(ByteBuffer _bb, PlayerConfiguration obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte varietyType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The type of the player, i.e. human, Psyonix bot, or a custom bot.
   */
  public Table variety(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }
  /**
   * The team of the player. Blue is 0, orange is 1.
   */
  public long team() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The value will be set by RLBot and is always overriden.
   * This value is mostly used internally to keep track of participants in the match.
   * The player id can be used to find the corresponding player in the GamePacket.
   */
  public int playerId() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createPlayerConfiguration(FlatBufferBuilder builder,
      byte varietyType,
      int varietyOffset,
      long team,
      int playerId) {
    builder.startTable(4);
    PlayerConfiguration.addPlayerId(builder, playerId);
    PlayerConfiguration.addTeam(builder, team);
    PlayerConfiguration.addVariety(builder, varietyOffset);
    PlayerConfiguration.addVarietyType(builder, varietyType);
    return PlayerConfiguration.endPlayerConfiguration(builder);
  }

  public static void startPlayerConfiguration(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addVarietyType(FlatBufferBuilder builder, byte varietyType) { builder.addByte(0, varietyType, 0); }
  public static void addVariety(FlatBufferBuilder builder, int varietyOffset) { builder.addOffset(1, varietyOffset, 0); }
  public static void addTeam(FlatBufferBuilder builder, long team) { builder.addInt(2, (int) team, (int) 0L); }
  public static void addPlayerId(FlatBufferBuilder builder, int playerId) { builder.addInt(3, playerId, 0); }
  public static int endPlayerConfiguration(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // variety
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerConfiguration get(int j) { return get(new PlayerConfiguration(), j); }
    public PlayerConfiguration get(PlayerConfiguration obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlayerConfigurationT unpack() {
    PlayerConfigurationT _o = new PlayerConfigurationT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlayerConfigurationT _o) {
    rlbot.flat.PlayerClassUnion _oVariety = new rlbot.flat.PlayerClassUnion();
    byte _oVarietyType = varietyType();
    _oVariety.setType(_oVarietyType);
    Table _oVarietyValue;
    switch (_oVarietyType) {
      case rlbot.flat.PlayerClass.Human:
        _oVarietyValue = variety(new rlbot.flat.Human());
        _oVariety.setValue(_oVarietyValue != null ? ((rlbot.flat.Human) _oVarietyValue).unpack() : null);
        break;
      case rlbot.flat.PlayerClass.CustomBot:
        _oVarietyValue = variety(new rlbot.flat.CustomBot());
        _oVariety.setValue(_oVarietyValue != null ? ((rlbot.flat.CustomBot) _oVarietyValue).unpack() : null);
        break;
      case rlbot.flat.PlayerClass.PsyonixBot:
        _oVarietyValue = variety(new rlbot.flat.PsyonixBot());
        _oVariety.setValue(_oVarietyValue != null ? ((rlbot.flat.PsyonixBot) _oVarietyValue).unpack() : null);
        break;
      default: break;
    }
    _o.setVariety(_oVariety);
    long _oTeam = team();
    _o.setTeam(_oTeam);
    int _oPlayerId = playerId();
    _o.setPlayerId(_oPlayerId);
  }
  public static int pack(FlatBufferBuilder builder, PlayerConfigurationT _o) {
    if (_o == null) return 0;
    byte _varietyType = _o.getVariety() == null ? rlbot.flat.PlayerClass.NONE : _o.getVariety().getType();
    int _variety = _o.getVariety() == null ? 0 : rlbot.flat.PlayerClassUnion.pack(builder, _o.getVariety());
    return createPlayerConfiguration(
      builder,
      _varietyType,
      _variety,
      _o.getTeam(),
      _o.getPlayerId());
  }
}

