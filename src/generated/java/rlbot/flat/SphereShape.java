// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A sphere with diameter.
 * Used for balls with a spherical shapes.
 */
@SuppressWarnings("unused")
public final class SphereShape extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static SphereShape getRootAsSphereShape(ByteBuffer _bb) { return getRootAsSphereShape(_bb, new SphereShape()); }
  public static SphereShape getRootAsSphereShape(ByteBuffer _bb, SphereShape obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SphereShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float diameter() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createSphereShape(FlatBufferBuilder builder,
      float diameter) {
    builder.startTable(1);
    SphereShape.addDiameter(builder, diameter);
    return SphereShape.endSphereShape(builder);
  }

  public static void startSphereShape(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDiameter(FlatBufferBuilder builder, float diameter) { builder.addFloat(0, diameter, 0.0f); }
  public static int endSphereShape(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SphereShape get(int j) { return get(new SphereShape(), j); }
    public SphereShape get(SphereShape obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SphereShapeT unpack() {
    SphereShapeT _o = new SphereShapeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SphereShapeT _o) {
    float _oDiameter = diameter();
    _o.setDiameter(_oDiameter);
  }
  public static int pack(FlatBufferBuilder builder, SphereShapeT _o) {
    if (_o == null) return 0;
    return createSphereShape(
      builder,
      _o.getDiameter());
  }
}

