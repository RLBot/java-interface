// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A RenderMessage for a line in 3D space between two RenderAnchors.
 */
@SuppressWarnings("unused")
public final class Line3D extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Line3D getRootAsLine3D(ByteBuffer _bb) { return getRootAsLine3D(_bb, new Line3D()); }
  public static Line3D getRootAsLine3D(ByteBuffer _bb, Line3D obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Line3D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.RenderAnchor start() { return start(new rlbot.flat.RenderAnchor()); }
  public rlbot.flat.RenderAnchor start(rlbot.flat.RenderAnchor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rlbot.flat.RenderAnchor end() { return end(new rlbot.flat.RenderAnchor()); }
  public rlbot.flat.RenderAnchor end(rlbot.flat.RenderAnchor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rlbot.flat.Color color() { return color(new rlbot.flat.Color()); }
  public rlbot.flat.Color color(rlbot.flat.Color obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startLine3D(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(0, startOffset, 0); }
  public static void addEnd(FlatBufferBuilder builder, int endOffset) { builder.addOffset(1, endOffset, 0); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addStruct(2, colorOffset, 0); }
  public static int endLine3D(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // start
    builder.required(o, 6);  // end
    builder.required(o, 8);  // color
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Line3D get(int j) { return get(new Line3D(), j); }
    public Line3D get(Line3D obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public Line3DT unpack() {
    Line3DT _o = new Line3DT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Line3DT _o) {
    if (start() != null) _o.setStart(start().unpack());
    else _o.setStart(null);
    if (end() != null) _o.setEnd(end().unpack());
    else _o.setEnd(null);
    if (color() != null) color().unpackTo(_o.getColor());
    else _o.setColor(null);
  }
  public static int pack(FlatBufferBuilder builder, Line3DT _o) {
    if (_o == null) return 0;
    int _start = _o.getStart() == null ? 0 : rlbot.flat.RenderAnchor.pack(builder, _o.getStart());
    int _end = _o.getEnd() == null ? 0 : rlbot.flat.RenderAnchor.pack(builder, _o.getEnd());
    startLine3D(builder);
    addStart(builder, _start);
    addEnd(builder, _end);
    addColor(builder, rlbot.flat.Color.pack(builder, _o.getColor()));
    return endLine3D(builder);
  }
}

