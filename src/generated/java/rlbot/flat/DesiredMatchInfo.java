// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Match info with nullable components.
 * Used for game state setting to define which part of the match info should change.
 */
@SuppressWarnings("unused")
public final class DesiredMatchInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static DesiredMatchInfo getRootAsDesiredMatchInfo(ByteBuffer _bb) { return getRootAsDesiredMatchInfo(_bb, new DesiredMatchInfo()); }
  public static DesiredMatchInfo getRootAsDesiredMatchInfo(ByteBuffer _bb, DesiredMatchInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DesiredMatchInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The strength of gravity. Default is usually -650 depending on mutators.
   * To set gravity to 0, use 0.0000001 instead, as 0 will set gravity back to the default.
   */
  public rlbot.flat.Float worldGravityZ() { return worldGravityZ(new rlbot.flat.Float()); }
  public rlbot.flat.Float worldGravityZ(rlbot.flat.Float obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The game speed. Default is 1.0.
   */
  public rlbot.flat.Float gameSpeed() { return gameSpeed(new rlbot.flat.Float()); }
  public rlbot.flat.Float gameSpeed(rlbot.flat.Float obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startDesiredMatchInfo(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addWorldGravityZ(FlatBufferBuilder builder, int worldGravityZOffset) { builder.addStruct(0, worldGravityZOffset, 0); }
  public static void addGameSpeed(FlatBufferBuilder builder, int gameSpeedOffset) { builder.addStruct(1, gameSpeedOffset, 0); }
  public static int endDesiredMatchInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DesiredMatchInfo get(int j) { return get(new DesiredMatchInfo(), j); }
    public DesiredMatchInfo get(DesiredMatchInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DesiredMatchInfoT unpack() {
    DesiredMatchInfoT _o = new DesiredMatchInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DesiredMatchInfoT _o) {
    if (worldGravityZ() != null) worldGravityZ().unpackTo(_o.getWorldGravityZ());
    else _o.setWorldGravityZ(null);
    if (gameSpeed() != null) gameSpeed().unpackTo(_o.getGameSpeed());
    else _o.setGameSpeed(null);
  }
  public static int pack(FlatBufferBuilder builder, DesiredMatchInfoT _o) {
    if (_o == null) return 0;
    startDesiredMatchInfo(builder);
    addWorldGravityZ(builder, rlbot.flat.Float.pack(builder, _o.getWorldGravityZ()));
    addGameSpeed(builder, rlbot.flat.Float.pack(builder, _o.getGameSpeed()));
    return endDesiredMatchInfo(builder);
  }
}

