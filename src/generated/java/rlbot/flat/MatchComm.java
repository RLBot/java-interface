// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A message sent to other bots and scripts through RLBot.
 * Use the team_only field if the message should only be received by team mates.
 * The message can also have a human-readable summary displayed in quick chat through the display field.
 */
@SuppressWarnings("unused")
public final class MatchComm extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static MatchComm getRootAsMatchComm(ByteBuffer _bb) { return getRootAsMatchComm(_bb, new MatchComm()); }
  public static MatchComm getRootAsMatchComm(ByteBuffer _bb, MatchComm obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatchComm __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the player that sent this message.
   * For scripts, this value is the index in the match configuration instead.
   */
  public long index() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The team of the player that sent this message.
   * For scripts, this value is 2.
   */
  public long team() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * True if this message is team-only, false if everyone can see it
   */
  public boolean teamOnly() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The message that will be displayed on the screen in quick chat.
   * This is intended for communication with humans.
   * Use the content field for communication with bots and scripts.
   */
  public String display() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer displayAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer displayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The contents of the message.
   * Use the display field for messages in quick chat.
   */
  public int content(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int contentLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector contentVector() { return contentVector(new ByteVector()); }
  public ByteVector contentVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer contentAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer contentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createMatchComm(FlatBufferBuilder builder,
      long index,
      long team,
      boolean teamOnly,
      int displayOffset,
      int contentOffset) {
    builder.startTable(5);
    MatchComm.addContent(builder, contentOffset);
    MatchComm.addDisplay(builder, displayOffset);
    MatchComm.addTeam(builder, team);
    MatchComm.addIndex(builder, index);
    MatchComm.addTeamOnly(builder, teamOnly);
    return MatchComm.endMatchComm(builder);
  }

  public static void startMatchComm(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addIndex(FlatBufferBuilder builder, long index) { builder.addInt(0, (int) index, (int) 0L); }
  public static void addTeam(FlatBufferBuilder builder, long team) { builder.addInt(1, (int) team, (int) 0L); }
  public static void addTeamOnly(FlatBufferBuilder builder, boolean teamOnly) { builder.addBoolean(2, teamOnly, false); }
  public static void addDisplay(FlatBufferBuilder builder, int displayOffset) { builder.addOffset(3, displayOffset, 0); }
  public static void addContent(FlatBufferBuilder builder, int contentOffset) { builder.addOffset(4, contentOffset, 0); }
  public static int createContentVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createContentVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startContentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endMatchComm(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 12);  // content
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatchComm get(int j) { return get(new MatchComm(), j); }
    public MatchComm get(MatchComm obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MatchCommT unpack() {
    MatchCommT _o = new MatchCommT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MatchCommT _o) {
    long _oIndex = index();
    _o.setIndex(_oIndex);
    long _oTeam = team();
    _o.setTeam(_oTeam);
    boolean _oTeamOnly = teamOnly();
    _o.setTeamOnly(_oTeamOnly);
    String _oDisplay = display();
    _o.setDisplay(_oDisplay);
    int[] _oContent = new int[contentLength()];
    for (int _j = 0; _j < contentLength(); ++_j) {_oContent[_j] = content(_j);}
    _o.setContent(_oContent);
  }
  public static int pack(FlatBufferBuilder builder, MatchCommT _o) {
    if (_o == null) return 0;
    int _display = _o.getDisplay() == null ? 0 : builder.createString(_o.getDisplay());
    int _content = 0;
    if (_o.getContent() != null) {
      byte[] __content = new byte[_o.getContent().length];
      int _j = 0;
      for (int _e : _o.getContent()) { __content[_j] = (byte) _e; _j++;}
      _content = createContentVector(builder, __content);
    }
    return createMatchComm(
      builder,
      _o.getIndex(),
      _o.getTeam(),
      _o.getTeamOnly(),
      _display,
      _content);
  }
}

