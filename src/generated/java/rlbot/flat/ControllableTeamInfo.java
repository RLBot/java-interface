// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Server message with information about the cars that the client can control.
 * Sent to bot clients as a response to ConnectionSettings.
 * There may be more than one car in case the bot is a hivemind.
 */
@SuppressWarnings("unused")
public final class ControllableTeamInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ControllableTeamInfo getRootAsControllableTeamInfo(ByteBuffer _bb) { return getRootAsControllableTeamInfo(_bb, new ControllableTeamInfo()); }
  public static ControllableTeamInfo getRootAsControllableTeamInfo(ByteBuffer _bb, ControllableTeamInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ControllableTeamInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The assigned team for this client.
   */
  public long team() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The bots that RLBot will allow this client to control.
   */
  public rlbot.flat.ControllableInfo controllables(int j) { return controllables(new rlbot.flat.ControllableInfo(), j); }
  public rlbot.flat.ControllableInfo controllables(rlbot.flat.ControllableInfo obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int controllablesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.ControllableInfo.Vector controllablesVector() { return controllablesVector(new rlbot.flat.ControllableInfo.Vector()); }
  public rlbot.flat.ControllableInfo.Vector controllablesVector(rlbot.flat.ControllableInfo.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createControllableTeamInfo(FlatBufferBuilder builder,
      long team,
      int controllablesOffset) {
    builder.startTable(2);
    ControllableTeamInfo.addControllables(builder, controllablesOffset);
    ControllableTeamInfo.addTeam(builder, team);
    return ControllableTeamInfo.endControllableTeamInfo(builder);
  }

  public static void startControllableTeamInfo(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTeam(FlatBufferBuilder builder, long team) { builder.addInt(0, (int) team, (int) 0L); }
  public static void addControllables(FlatBufferBuilder builder, int controllablesOffset) { builder.addOffset(1, controllablesOffset, 0); }
  public static int createControllablesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControllablesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endControllableTeamInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // controllables
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ControllableTeamInfo get(int j) { return get(new ControllableTeamInfo(), j); }
    public ControllableTeamInfo get(ControllableTeamInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ControllableTeamInfoT unpack() {
    ControllableTeamInfoT _o = new ControllableTeamInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ControllableTeamInfoT _o) {
    long _oTeam = team();
    _o.setTeam(_oTeam);
    rlbot.flat.ControllableInfoT[] _oControllables = new rlbot.flat.ControllableInfoT[controllablesLength()];
    for (int _j = 0; _j < controllablesLength(); ++_j) {_oControllables[_j] = (controllables(_j) != null ? controllables(_j).unpack() : null);}
    _o.setControllables(_oControllables);
  }
  public static int pack(FlatBufferBuilder builder, ControllableTeamInfoT _o) {
    if (_o == null) return 0;
    int _controllables = 0;
    if (_o.getControllables() != null) {
      int[] __controllables = new int[_o.getControllables().length];
      int _j = 0;
      for (rlbot.flat.ControllableInfoT _e : _o.getControllables()) { __controllables[_j] = rlbot.flat.ControllableInfo.pack(builder, _e); _j++;}
      _controllables = createControllablesVector(builder, __controllables);
    }
    return createControllableTeamInfo(
      builder,
      _o.getTeam(),
      _controllables);
  }
}

