// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A ball state with nullable components.
 * Used for game state setting to define which part of a ball's state should change.
 */
@SuppressWarnings("unused")
public final class DesiredBallState extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static DesiredBallState getRootAsDesiredBallState(ByteBuffer _bb) { return getRootAsDesiredBallState(_bb, new DesiredBallState()); }
  public static DesiredBallState getRootAsDesiredBallState(ByteBuffer _bb, DesiredBallState obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DesiredBallState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.DesiredPhysics physics() { return physics(new rlbot.flat.DesiredPhysics()); }
  public rlbot.flat.DesiredPhysics physics(rlbot.flat.DesiredPhysics obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDesiredBallState(FlatBufferBuilder builder,
      int physicsOffset) {
    builder.startTable(1);
    DesiredBallState.addPhysics(builder, physicsOffset);
    return DesiredBallState.endDesiredBallState(builder);
  }

  public static void startDesiredBallState(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addPhysics(FlatBufferBuilder builder, int physicsOffset) { builder.addOffset(0, physicsOffset, 0); }
  public static int endDesiredBallState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // physics
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DesiredBallState get(int j) { return get(new DesiredBallState(), j); }
    public DesiredBallState get(DesiredBallState obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DesiredBallStateT unpack() {
    DesiredBallStateT _o = new DesiredBallStateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DesiredBallStateT _o) {
    if (physics() != null) _o.setPhysics(physics().unpack());
    else _o.setPhysics(null);
  }
  public static int pack(FlatBufferBuilder builder, DesiredBallStateT _o) {
    if (_o == null) return 0;
    int _physics = _o.getPhysics() == null ? 0 : rlbot.flat.DesiredPhysics.pack(builder, _o.getPhysics());
    return createDesiredBallState(
      builder,
      _physics);
  }
}

