// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A rotator describing a rotation with nullable pith, yaw, and roll.
 * Used for game state setting to define which part of a rotator should change.
 * If a component is null, then the component will keep its current value.
 * Values are in radians.
 */
@SuppressWarnings("unused")
public final class RotatorPartial extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static RotatorPartial getRootAsRotatorPartial(ByteBuffer _bb) { return getRootAsRotatorPartial(_bb, new RotatorPartial()); }
  public static RotatorPartial getRootAsRotatorPartial(ByteBuffer _bb, RotatorPartial obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RotatorPartial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * In radians with range (-pi/2,+pi/2) where 0 is flat, +pi/2 is nose straight up, -pi/2 is nose straight down.
   */
  public rlbot.flat.Float pitch() { return pitch(new rlbot.flat.Float()); }
  public rlbot.flat.Float pitch(rlbot.flat.Float obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * In radians with range [-pi,+pi) where 0 is towards positive x, rotating clockwise as increased (when seen from above).
   */
  public rlbot.flat.Float yaw() { return yaw(new rlbot.flat.Float()); }
  public rlbot.flat.Float yaw(rlbot.flat.Float obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * In radians with range (-pi,+pi) where 0 is upright, positive is tilted right, negative is tilted left.
   */
  public rlbot.flat.Float roll() { return roll(new rlbot.flat.Float()); }
  public rlbot.flat.Float roll(rlbot.flat.Float obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startRotatorPartial(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPitch(FlatBufferBuilder builder, int pitchOffset) { builder.addStruct(0, pitchOffset, 0); }
  public static void addYaw(FlatBufferBuilder builder, int yawOffset) { builder.addStruct(1, yawOffset, 0); }
  public static void addRoll(FlatBufferBuilder builder, int rollOffset) { builder.addStruct(2, rollOffset, 0); }
  public static int endRotatorPartial(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RotatorPartial get(int j) { return get(new RotatorPartial(), j); }
    public RotatorPartial get(RotatorPartial obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RotatorPartialT unpack() {
    RotatorPartialT _o = new RotatorPartialT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RotatorPartialT _o) {
    if (pitch() != null) pitch().unpackTo(_o.getPitch());
    else _o.setPitch(null);
    if (yaw() != null) yaw().unpackTo(_o.getYaw());
    else _o.setYaw(null);
    if (roll() != null) roll().unpackTo(_o.getRoll());
    else _o.setRoll(null);
  }
  public static int pack(FlatBufferBuilder builder, RotatorPartialT _o) {
    if (_o == null) return 0;
    startRotatorPartial(builder);
    addPitch(builder, rlbot.flat.Float.pack(builder, _o.getPitch()));
    addYaw(builder, rlbot.flat.Float.pack(builder, _o.getYaw()));
    addRoll(builder, rlbot.flat.Float.pack(builder, _o.getRoll()));
    return endRotatorPartial(builder);
  }
}

