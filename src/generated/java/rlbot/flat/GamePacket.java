// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A packet of data from the game.
 * Is is sent every tick to bots, scripts, etc.
 * Static data is found in the FieldInfo.
 */
@SuppressWarnings("unused")
public final class GamePacket extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static GamePacket getRootAsGamePacket(ByteBuffer _bb) { return getRootAsGamePacket(_bb, new GamePacket()); }
  public static GamePacket getRootAsGamePacket(ByteBuffer _bb, GamePacket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GamePacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The current state of all players and their cars.
   */
  public rlbot.flat.PlayerInfo players(int j) { return players(new rlbot.flat.PlayerInfo(), j); }
  public rlbot.flat.PlayerInfo players(rlbot.flat.PlayerInfo obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playersLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.PlayerInfo.Vector playersVector() { return playersVector(new rlbot.flat.PlayerInfo.Vector()); }
  public rlbot.flat.PlayerInfo.Vector playersVector(rlbot.flat.PlayerInfo.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The current state of all boost pads.
   * The static information about boost pads are found in the FieldInfo.
   * The boost pads are ordered by y-coordinate and then x-coordinate.
   */
  public rlbot.flat.BoostPadState boostPads(int j) { return boostPads(new rlbot.flat.BoostPadState(), j); }
  public rlbot.flat.BoostPadState boostPads(rlbot.flat.BoostPadState obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int boostPadsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.BoostPadState.Vector boostPadsVector() { return boostPadsVector(new rlbot.flat.BoostPadState.Vector()); }
  public rlbot.flat.BoostPadState.Vector boostPadsVector(rlbot.flat.BoostPadState.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 8, bb) : null; }
  /**
   * The current state of all balls.
   */
  public rlbot.flat.BallInfo balls(int j) { return balls(new rlbot.flat.BallInfo(), j); }
  public rlbot.flat.BallInfo balls(rlbot.flat.BallInfo obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ballsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.BallInfo.Vector ballsVector() { return ballsVector(new rlbot.flat.BallInfo.Vector()); }
  public rlbot.flat.BallInfo.Vector ballsVector(rlbot.flat.BallInfo.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The current state of the match such as timers and gravity.
   */
  public rlbot.flat.MatchInfo matchInfo() { return matchInfo(new rlbot.flat.MatchInfo()); }
  public rlbot.flat.MatchInfo matchInfo(rlbot.flat.MatchInfo obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The current state of teams, i.e. the team scores.
   */
  public rlbot.flat.TeamInfo teams(int j) { return teams(new rlbot.flat.TeamInfo(), j); }
  public rlbot.flat.TeamInfo teams(rlbot.flat.TeamInfo obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int teamsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.TeamInfo.Vector teamsVector() { return teamsVector(new rlbot.flat.TeamInfo.Vector()); }
  public rlbot.flat.TeamInfo.Vector teamsVector(rlbot.flat.TeamInfo.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 8, bb) : null; }

  public static int createGamePacket(FlatBufferBuilder builder,
      int playersOffset,
      int boostPadsOffset,
      int ballsOffset,
      int matchInfoOffset,
      int teamsOffset) {
    builder.startTable(5);
    GamePacket.addTeams(builder, teamsOffset);
    GamePacket.addMatchInfo(builder, matchInfoOffset);
    GamePacket.addBalls(builder, ballsOffset);
    GamePacket.addBoostPads(builder, boostPadsOffset);
    GamePacket.addPlayers(builder, playersOffset);
    return GamePacket.endGamePacket(builder);
  }

  public static void startGamePacket(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(0, playersOffset, 0); }
  public static int createPlayersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBoostPads(FlatBufferBuilder builder, int boostPadsOffset) { builder.addOffset(1, boostPadsOffset, 0); }
  public static void startBoostPadsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static void addBalls(FlatBufferBuilder builder, int ballsOffset) { builder.addOffset(2, ballsOffset, 0); }
  public static int createBallsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBallsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMatchInfo(FlatBufferBuilder builder, int matchInfoOffset) { builder.addOffset(3, matchInfoOffset, 0); }
  public static void addTeams(FlatBufferBuilder builder, int teamsOffset) { builder.addOffset(4, teamsOffset, 0); }
  public static void startTeamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static int endGamePacket(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // players
    builder.required(o, 6);  // boost_pads
    builder.required(o, 8);  // balls
    builder.required(o, 10);  // match_info
    builder.required(o, 12);  // teams
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GamePacket get(int j) { return get(new GamePacket(), j); }
    public GamePacket get(GamePacket obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public GamePacketT unpack() {
    GamePacketT _o = new GamePacketT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(GamePacketT _o) {
    rlbot.flat.PlayerInfoT[] _oPlayers = new rlbot.flat.PlayerInfoT[playersLength()];
    for (int _j = 0; _j < playersLength(); ++_j) {_oPlayers[_j] = (players(_j) != null ? players(_j).unpack() : null);}
    _o.setPlayers(_oPlayers);
    rlbot.flat.BoostPadStateT[] _oBoostPads = new rlbot.flat.BoostPadStateT[boostPadsLength()];
    for (int _j = 0; _j < boostPadsLength(); ++_j) {_oBoostPads[_j] = (boostPads(_j) != null ? boostPads(_j).unpack() : null);}
    _o.setBoostPads(_oBoostPads);
    rlbot.flat.BallInfoT[] _oBalls = new rlbot.flat.BallInfoT[ballsLength()];
    for (int _j = 0; _j < ballsLength(); ++_j) {_oBalls[_j] = (balls(_j) != null ? balls(_j).unpack() : null);}
    _o.setBalls(_oBalls);
    if (matchInfo() != null) _o.setMatchInfo(matchInfo().unpack());
    else _o.setMatchInfo(null);
    rlbot.flat.TeamInfoT[] _oTeams = new rlbot.flat.TeamInfoT[teamsLength()];
    for (int _j = 0; _j < teamsLength(); ++_j) {_oTeams[_j] = (teams(_j) != null ? teams(_j).unpack() : null);}
    _o.setTeams(_oTeams);
  }
  public static int pack(FlatBufferBuilder builder, GamePacketT _o) {
    if (_o == null) return 0;
    int _players = 0;
    if (_o.getPlayers() != null) {
      int[] __players = new int[_o.getPlayers().length];
      int _j = 0;
      for (rlbot.flat.PlayerInfoT _e : _o.getPlayers()) { __players[_j] = rlbot.flat.PlayerInfo.pack(builder, _e); _j++;}
      _players = createPlayersVector(builder, __players);
    }
    int _boostPads = 0;
    rlbot.flat.BoostPadStateT[] _oBoostPads = _o.getBoostPads();
    if (_oBoostPads != null) {
      int _unused_offset = 0;
      startBoostPadsVector(builder, _oBoostPads.length);
      for (int _j = _oBoostPads.length - 1; _j >=0; _j--) { _unused_offset = rlbot.flat.BoostPadState.pack(builder, _oBoostPads[_j]);}
      _boostPads = builder.endVector();
    }
    int _balls = 0;
    if (_o.getBalls() != null) {
      int[] __balls = new int[_o.getBalls().length];
      int _j = 0;
      for (rlbot.flat.BallInfoT _e : _o.getBalls()) { __balls[_j] = rlbot.flat.BallInfo.pack(builder, _e); _j++;}
      _balls = createBallsVector(builder, __balls);
    }
    int _matchInfo = _o.getMatchInfo() == null ? 0 : rlbot.flat.MatchInfo.pack(builder, _o.getMatchInfo());
    int _teams = 0;
    rlbot.flat.TeamInfoT[] _oTeams = _o.getTeams();
    if (_oTeams != null) {
      int _unused_offset = 0;
      startTeamsVector(builder, _oTeams.length);
      for (int _j = _oTeams.length - 1; _j >=0; _j--) { _unused_offset = rlbot.flat.TeamInfo.pack(builder, _oTeams[_j]);}
      _teams = builder.endVector();
    }
    return createGamePacket(
      builder,
      _players,
      _boostPads,
      _balls,
      _matchInfo,
      _teams);
  }
}

