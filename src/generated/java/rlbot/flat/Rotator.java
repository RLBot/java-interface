// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Expresses the rotation state of an object in Euler angles. Values are in radians.
 */
@SuppressWarnings("unused")
public final class Rotator extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Rotator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * In radians with range (-pi/2,+pi/2) where 0 is flat, +pi/2 is nose straight up, -pi/2 is nose straight down.
   */
  public float pitch() { return bb.getFloat(bb_pos + 0); }
  /**
   * In radians with range [-pi,+pi) where 0 is towards positive x, rotating clockwise as increased (when seen from above).
   */
  public float yaw() { return bb.getFloat(bb_pos + 4); }
  /**
   * In radians with range (-pi,+pi) where 0 is upright, positive is tilted right, negative is tilted left.
   */
  public float roll() { return bb.getFloat(bb_pos + 8); }

  public static int createRotator(FlatBufferBuilder builder, float pitch, float yaw, float roll) {
    builder.prep(4, 12);
    builder.putFloat(roll);
    builder.putFloat(yaw);
    builder.putFloat(pitch);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Rotator get(int j) { return get(new Rotator(), j); }
    public Rotator get(Rotator obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public RotatorT unpack() {
    RotatorT _o = new RotatorT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RotatorT _o) {
    float _oPitch = pitch();
    _o.setPitch(_oPitch);
    float _oYaw = yaw();
    _o.setYaw(_oYaw);
    float _oRoll = roll();
    _o.setRoll(_oRoll);
  }
  public static int pack(FlatBufferBuilder builder, RotatorT _o) {
    if (_o == null) return 0;
    return createRotator(
      builder,
      _o.getPitch(),
      _o.getYaw(),
      _o.getRoll());
  }
}

