// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Sent by clients when connecting to RLBot to indicate what type of messages are desired.
 * This could be sent by a bot, or a bot manager governing several bots, an
 * overlay, or any other utility that connects to the RLBot process.
 */
@SuppressWarnings("unused")
public final class ConnectionSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ConnectionSettings getRootAsConnectionSettings(ByteBuffer _bb) { return getRootAsConnectionSettings(_bb, new ConnectionSettings()); }
  public static ConnectionSettings getRootAsConnectionSettings(ByteBuffer _bb, ConnectionSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ConnectionSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The ID of the bot/script that is associated with the incoming connection.
   */
  public String agentId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agentIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer agentIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * If this is set, RLBot will send BallPrediction data back to the client when available.
   */
  public boolean wantsBallPredictions() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * If this is set, RLBot will send MatchComms to the client when available.
   */
  public boolean wantsComms() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * If this is set, RLBot will close the connection when a match is stopped or when a new
   * match is started. The GUI and other match runners should likely not set this.
   */
  public boolean closeBetweenMatches() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createConnectionSettings(FlatBufferBuilder builder,
      int agentIdOffset,
      boolean wantsBallPredictions,
      boolean wantsComms,
      boolean closeBetweenMatches) {
    builder.startTable(4);
    ConnectionSettings.addAgentId(builder, agentIdOffset);
    ConnectionSettings.addCloseBetweenMatches(builder, closeBetweenMatches);
    ConnectionSettings.addWantsComms(builder, wantsComms);
    ConnectionSettings.addWantsBallPredictions(builder, wantsBallPredictions);
    return ConnectionSettings.endConnectionSettings(builder);
  }

  public static void startConnectionSettings(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addAgentId(FlatBufferBuilder builder, int agentIdOffset) { builder.addOffset(0, agentIdOffset, 0); }
  public static void addWantsBallPredictions(FlatBufferBuilder builder, boolean wantsBallPredictions) { builder.addBoolean(1, wantsBallPredictions, false); }
  public static void addWantsComms(FlatBufferBuilder builder, boolean wantsComms) { builder.addBoolean(2, wantsComms, false); }
  public static void addCloseBetweenMatches(FlatBufferBuilder builder, boolean closeBetweenMatches) { builder.addBoolean(3, closeBetweenMatches, false); }
  public static int endConnectionSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // agent_id
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ConnectionSettings get(int j) { return get(new ConnectionSettings(), j); }
    public ConnectionSettings get(ConnectionSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ConnectionSettingsT unpack() {
    ConnectionSettingsT _o = new ConnectionSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ConnectionSettingsT _o) {
    String _oAgentId = agentId();
    _o.setAgentId(_oAgentId);
    boolean _oWantsBallPredictions = wantsBallPredictions();
    _o.setWantsBallPredictions(_oWantsBallPredictions);
    boolean _oWantsComms = wantsComms();
    _o.setWantsComms(_oWantsComms);
    boolean _oCloseBetweenMatches = closeBetweenMatches();
    _o.setCloseBetweenMatches(_oCloseBetweenMatches);
  }
  public static int pack(FlatBufferBuilder builder, ConnectionSettingsT _o) {
    if (_o == null) return 0;
    int _agentId = _o.getAgentId() == null ? 0 : builder.createString(_o.getAgentId());
    return createConnectionSettings(
      builder,
      _agentId,
      _o.getWantsBallPredictions(),
      _o.getWantsComms(),
      _o.getCloseBetweenMatches());
  }
}

