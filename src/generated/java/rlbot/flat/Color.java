// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * An RGBA color.
 */
@SuppressWarnings("unused")
public final class Color extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int r() { return bb.get(bb_pos + 0) & 0xFF; }
  public int g() { return bb.get(bb_pos + 1) & 0xFF; }
  public int b() { return bb.get(bb_pos + 2) & 0xFF; }
  public int a() { return bb.get(bb_pos + 3) & 0xFF; }

  public static int createColor(FlatBufferBuilder builder, int r, int g, int b, int a) {
    builder.prep(1, 4);
    builder.putByte((byte) a);
    builder.putByte((byte) b);
    builder.putByte((byte) g);
    builder.putByte((byte) r);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Color get(int j) { return get(new Color(), j); }
    public Color get(Color obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public ColorT unpack() {
    ColorT _o = new ColorT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ColorT _o) {
    int _oR = r();
    _o.setR(_oR);
    int _oG = g();
    _o.setG(_oG);
    int _oB = b();
    _o.setB(_oB);
    int _oA = a();
    _o.setA(_oA);
  }
  public static int pack(FlatBufferBuilder builder, ColorT _o) {
    if (_o == null) return 0;
    return createColor(
      builder,
      _o.getR(),
      _o.getG(),
      _o.getB(),
      _o.getA());
  }
}

