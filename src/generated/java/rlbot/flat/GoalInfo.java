// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Static information about a goal on the field such as dimensions and location.
 * More values can be found on https://wiki.rlbot.org/botmaking/useful-game-values/
 */
@SuppressWarnings("unused")
public final class GoalInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static GoalInfo getRootAsGoalInfo(ByteBuffer _bb) { return getRootAsGoalInfo(_bb, new GoalInfo()); }
  public static GoalInfo getRootAsGoalInfo(ByteBuffer _bb, GoalInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GoalInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the team that this goal belongs to.
   */
  public int teamNum() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The center location of the goal.
   */
  public rlbot.flat.Vector3 location() { return location(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 location(rlbot.flat.Vector3 obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The unit direction point away from the opening of the goal.
   */
  public rlbot.flat.Vector3 direction() { return direction(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 direction(rlbot.flat.Vector3 obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The width of the goal. 1785 uu wide on a standard field.
   */
  public float width() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The height of the goal. 643 uu tall on a standard field.
   */
  public float height() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void startGoalInfo(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTeamNum(FlatBufferBuilder builder, int teamNum) { builder.addInt(0, teamNum, 0); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addStruct(1, locationOffset, 0); }
  public static void addDirection(FlatBufferBuilder builder, int directionOffset) { builder.addStruct(2, directionOffset, 0); }
  public static void addWidth(FlatBufferBuilder builder, float width) { builder.addFloat(3, width, 0.0f); }
  public static void addHeight(FlatBufferBuilder builder, float height) { builder.addFloat(4, height, 0.0f); }
  public static int endGoalInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // location
    builder.required(o, 8);  // direction
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GoalInfo get(int j) { return get(new GoalInfo(), j); }
    public GoalInfo get(GoalInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public GoalInfoT unpack() {
    GoalInfoT _o = new GoalInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(GoalInfoT _o) {
    int _oTeamNum = teamNum();
    _o.setTeamNum(_oTeamNum);
    if (location() != null) location().unpackTo(_o.getLocation());
    else _o.setLocation(null);
    if (direction() != null) direction().unpackTo(_o.getDirection());
    else _o.setDirection(null);
    float _oWidth = width();
    _o.setWidth(_oWidth);
    float _oHeight = height();
    _o.setHeight(_oHeight);
  }
  public static int pack(FlatBufferBuilder builder, GoalInfoT _o) {
    if (_o == null) return 0;
    startGoalInfo(builder);
    addTeamNum(builder, _o.getTeamNum());
    addLocation(builder, rlbot.flat.Vector3.pack(builder, _o.getLocation()));
    addDirection(builder, rlbot.flat.Vector3.pack(builder, _o.getDirection()));
    addWidth(builder, _o.getWidth());
    addHeight(builder, _o.getHeight());
    return endGoalInfo(builder);
  }
}

