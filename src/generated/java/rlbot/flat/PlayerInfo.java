// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A collection of information about a player and their car.
 */
@SuppressWarnings("unused")
public final class PlayerInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PlayerInfo getRootAsPlayerInfo(ByteBuffer _bb) { return getRootAsPlayerInfo(_bb, new PlayerInfo()); }
  public static PlayerInfo getRootAsPlayerInfo(ByteBuffer _bb, PlayerInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The physical state of the player's car.
   */
  public rlbot.flat.Physics physics() { return physics(new rlbot.flat.Physics()); }
  public rlbot.flat.Physics physics(rlbot.flat.Physics obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The various scores of this player, e.g. those on the leaderboard.
   */
  public rlbot.flat.ScoreInfo scoreInfo() { return scoreInfo(new rlbot.flat.ScoreInfo()); }
  public rlbot.flat.ScoreInfo scoreInfo(rlbot.flat.ScoreInfo obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The hitbox of the player's car.
   * Note that the hitbox is not centered at the cars location.
   * See the hitbox offset.
   */
  public rlbot.flat.BoxShape hitbox() { return hitbox(new rlbot.flat.BoxShape()); }
  public rlbot.flat.BoxShape hitbox(rlbot.flat.BoxShape obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The center of the hitbox in local coordinates.
   */
  public rlbot.flat.Vector3 hitboxOffset() { return hitboxOffset(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 hitboxOffset(rlbot.flat.Vector3 obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * Information about the latest touch with a ball.
   * Is null if the player has yet to touch the ball.
   */
  public rlbot.flat.Touch latestTouch() { return latestTouch(new rlbot.flat.Touch()); }
  public rlbot.flat.Touch latestTouch(rlbot.flat.Touch obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Whether the player's car is on the ground or in the air, and what jump/dodging forces currently affects the car.
   */
  public int airState() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * How long until the player cannot dodge/double jump anymore.
   * The value is -1 while on ground or when airborne for too long after jumping.
   * A dodge/double jump is possible for 1.25 seconds after the first jump plus
   * up to an additional 0.2 seconds depending how long the jump button was pressed for the first jump.
   */
  public float dodgeTimeout() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * How long until the player is not demolished anymore.
   * The value is -1 if while not demolished.
   */
  public float demolishedTimeout() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Whether the player's car is moving at supersonic speed and can demolish.
   */
  public boolean isSupersonic() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Whether the player is a bot or a human.
   */
  public boolean isBot() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The name of the player as it appears in game, i.e. possibly appended with "(2)".
   * The original name can be found in the match configuration.
   */
  public String name() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The team of the player.
   */
  public long team() { int o = __offset(26); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The current boost, from 0 to 100.
   */
  public float boost() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The id of the player.
   * This value is mostly used internally to keep track of participants in the match.
   * The id can be used to find the corresponding PlayerConfiguration in the MatchConfiguration.
   */
  public int playerId() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Events from the latest tick involving this player. Possible values include:
   *    Win, Loss, TimePlayed;
   *    Shot, Assist, Center, Clear, PoolShot;
   *    Goal, AerialGoal, BicycleGoal, BulletGoal, BackwardsGoal, LongGoal, OvertimeGoal, TurtleGoal;
   *    AerialHit, BicycleHit, BulletHit, JuggleHit, FirstTouch, BallHit;
   *    Save, EpicSave, FreezeSave;
   *    HatTrick, Savior, Playmaker, MVP;
   *    FastestGoal, SlowestGoal, FurthestGoal, OwnGoal;
   *    MostBallTouches, FewestBallTouches, MostBoostPickups, FewestBoostPickups, BoostPickups;
   *    CarTouches, Demolition, Demolish;
   *    LowFive, HighFive;
   * Note that the list clears every tick.
   */
  public String accolades(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int accoladesLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector accoladesVector() { return accoladesVector(new StringVector()); }
  public StringVector accoladesVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The last controller input from this player.
   */
  public rlbot.flat.ControllerState lastInput() { return lastInput(new rlbot.flat.ControllerState()); }
  public rlbot.flat.ControllerState lastInput(rlbot.flat.ControllerState obj) { int o = __offset(34); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * True if the player has jumped. See dodge_timeout to know if a dodge/secondary jump is available.
   */
  public boolean hasJumped() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * True if the player has doubled jumped.
   */
  public boolean hasDoubleJumped() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * True if the player has dodged.
   */
  public boolean hasDodged() { int o = __offset(40); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The time in seconds since the last dodge was initiated.
   * Resets to 0 when the player lands on the ground.
   */
  public float dodgeElapsed() { int o = __offset(42); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The unit direction of the latest dodge.
   * The value will be (0,0) if it was a stall.
   */
  public rlbot.flat.Vector2 dodgeDir() { return dodgeDir(new rlbot.flat.Vector2()); }
  public rlbot.flat.Vector2 dodgeDir(rlbot.flat.Vector2 obj) { int o = __offset(44); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startPlayerInfo(FlatBufferBuilder builder) { builder.startTable(21); }
  public static void addPhysics(FlatBufferBuilder builder, int physicsOffset) { builder.addStruct(0, physicsOffset, 0); }
  public static void addScoreInfo(FlatBufferBuilder builder, int scoreInfoOffset) { builder.addStruct(1, scoreInfoOffset, 0); }
  public static void addHitbox(FlatBufferBuilder builder, int hitboxOffset) { builder.addOffset(2, hitboxOffset, 0); }
  public static void addHitboxOffset(FlatBufferBuilder builder, int hitboxOffsetOffset) { builder.addStruct(3, hitboxOffsetOffset, 0); }
  public static void addLatestTouch(FlatBufferBuilder builder, int latestTouchOffset) { builder.addOffset(4, latestTouchOffset, 0); }
  public static void addAirState(FlatBufferBuilder builder, int airState) { builder.addByte(5, (byte) airState, (byte) 0); }
  public static void addDodgeTimeout(FlatBufferBuilder builder, float dodgeTimeout) { builder.addFloat(6, dodgeTimeout, 0.0f); }
  public static void addDemolishedTimeout(FlatBufferBuilder builder, float demolishedTimeout) { builder.addFloat(7, demolishedTimeout, 0.0f); }
  public static void addIsSupersonic(FlatBufferBuilder builder, boolean isSupersonic) { builder.addBoolean(8, isSupersonic, false); }
  public static void addIsBot(FlatBufferBuilder builder, boolean isBot) { builder.addBoolean(9, isBot, false); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(10, nameOffset, 0); }
  public static void addTeam(FlatBufferBuilder builder, long team) { builder.addInt(11, (int) team, (int) 0L); }
  public static void addBoost(FlatBufferBuilder builder, float boost) { builder.addFloat(12, boost, 0.0f); }
  public static void addPlayerId(FlatBufferBuilder builder, int playerId) { builder.addInt(13, playerId, 0); }
  public static void addAccolades(FlatBufferBuilder builder, int accoladesOffset) { builder.addOffset(14, accoladesOffset, 0); }
  public static int createAccoladesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAccoladesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLastInput(FlatBufferBuilder builder, int lastInputOffset) { builder.addStruct(15, lastInputOffset, 0); }
  public static void addHasJumped(FlatBufferBuilder builder, boolean hasJumped) { builder.addBoolean(16, hasJumped, false); }
  public static void addHasDoubleJumped(FlatBufferBuilder builder, boolean hasDoubleJumped) { builder.addBoolean(17, hasDoubleJumped, false); }
  public static void addHasDodged(FlatBufferBuilder builder, boolean hasDodged) { builder.addBoolean(18, hasDodged, false); }
  public static void addDodgeElapsed(FlatBufferBuilder builder, float dodgeElapsed) { builder.addFloat(19, dodgeElapsed, 0.0f); }
  public static void addDodgeDir(FlatBufferBuilder builder, int dodgeDirOffset) { builder.addStruct(20, dodgeDirOffset, 0); }
  public static int endPlayerInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // physics
    builder.required(o, 6);  // score_info
    builder.required(o, 8);  // hitbox
    builder.required(o, 10);  // hitbox_offset
    builder.required(o, 24);  // name
    builder.required(o, 32);  // accolades
    builder.required(o, 34);  // last_input
    builder.required(o, 44);  // dodge_dir
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerInfo get(int j) { return get(new PlayerInfo(), j); }
    public PlayerInfo get(PlayerInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlayerInfoT unpack() {
    PlayerInfoT _o = new PlayerInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlayerInfoT _o) {
    if (physics() != null) physics().unpackTo(_o.getPhysics());
    else _o.setPhysics(null);
    if (scoreInfo() != null) scoreInfo().unpackTo(_o.getScoreInfo());
    else _o.setScoreInfo(null);
    if (hitbox() != null) _o.setHitbox(hitbox().unpack());
    else _o.setHitbox(null);
    if (hitboxOffset() != null) hitboxOffset().unpackTo(_o.getHitboxOffset());
    else _o.setHitboxOffset(null);
    if (latestTouch() != null) _o.setLatestTouch(latestTouch().unpack());
    else _o.setLatestTouch(null);
    int _oAirState = airState();
    _o.setAirState(_oAirState);
    float _oDodgeTimeout = dodgeTimeout();
    _o.setDodgeTimeout(_oDodgeTimeout);
    float _oDemolishedTimeout = demolishedTimeout();
    _o.setDemolishedTimeout(_oDemolishedTimeout);
    boolean _oIsSupersonic = isSupersonic();
    _o.setIsSupersonic(_oIsSupersonic);
    boolean _oIsBot = isBot();
    _o.setIsBot(_oIsBot);
    String _oName = name();
    _o.setName(_oName);
    long _oTeam = team();
    _o.setTeam(_oTeam);
    float _oBoost = boost();
    _o.setBoost(_oBoost);
    int _oPlayerId = playerId();
    _o.setPlayerId(_oPlayerId);
    String[] _oAccolades = new String[accoladesLength()];
    for (int _j = 0; _j < accoladesLength(); ++_j) {_oAccolades[_j] = accolades(_j);}
    _o.setAccolades(_oAccolades);
    if (lastInput() != null) lastInput().unpackTo(_o.getLastInput());
    else _o.setLastInput(null);
    boolean _oHasJumped = hasJumped();
    _o.setHasJumped(_oHasJumped);
    boolean _oHasDoubleJumped = hasDoubleJumped();
    _o.setHasDoubleJumped(_oHasDoubleJumped);
    boolean _oHasDodged = hasDodged();
    _o.setHasDodged(_oHasDodged);
    float _oDodgeElapsed = dodgeElapsed();
    _o.setDodgeElapsed(_oDodgeElapsed);
    if (dodgeDir() != null) dodgeDir().unpackTo(_o.getDodgeDir());
    else _o.setDodgeDir(null);
  }
  public static int pack(FlatBufferBuilder builder, PlayerInfoT _o) {
    if (_o == null) return 0;
    int _hitbox = _o.getHitbox() == null ? 0 : rlbot.flat.BoxShape.pack(builder, _o.getHitbox());
    int _latestTouch = _o.getLatestTouch() == null ? 0 : rlbot.flat.Touch.pack(builder, _o.getLatestTouch());
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _accolades = 0;
    if (_o.getAccolades() != null) {
      int[] __accolades = new int[_o.getAccolades().length];
      int _j = 0;
      for (String _e : _o.getAccolades()) { __accolades[_j] = builder.createString(_e); _j++;}
      _accolades = createAccoladesVector(builder, __accolades);
    }
    startPlayerInfo(builder);
    addPhysics(builder, rlbot.flat.Physics.pack(builder, _o.getPhysics()));
    addScoreInfo(builder, rlbot.flat.ScoreInfo.pack(builder, _o.getScoreInfo()));
    addHitbox(builder, _hitbox);
    addHitboxOffset(builder, rlbot.flat.Vector3.pack(builder, _o.getHitboxOffset()));
    addLatestTouch(builder, _latestTouch);
    addAirState(builder, _o.getAirState());
    addDodgeTimeout(builder, _o.getDodgeTimeout());
    addDemolishedTimeout(builder, _o.getDemolishedTimeout());
    addIsSupersonic(builder, _o.getIsSupersonic());
    addIsBot(builder, _o.getIsBot());
    addName(builder, _name);
    addTeam(builder, _o.getTeam());
    addBoost(builder, _o.getBoost());
    addPlayerId(builder, _o.getPlayerId());
    addAccolades(builder, _accolades);
    addLastInput(builder, rlbot.flat.ControllerState.pack(builder, _o.getLastInput()));
    addHasJumped(builder, _o.getHasJumped());
    addHasDoubleJumped(builder, _o.getHasDoubleJumped());
    addHasDodged(builder, _o.getHasDodged());
    addDodgeElapsed(builder, _o.getDodgeElapsed());
    addDodgeDir(builder, rlbot.flat.Vector2.pack(builder, _o.getDodgeDir()));
    return endPlayerInfo(builder);
  }
}

