// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Defines the car type, color, and other aspects of the player's appearance.
 * See https://wiki.rlbot.org/botmaking/bot-customization/
 */
@SuppressWarnings("unused")
public final class PlayerLoadout extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static PlayerLoadout getRootAsPlayerLoadout(ByteBuffer _bb) { return getRootAsPlayerLoadout(_bb, new PlayerLoadout()); }
  public static PlayerLoadout getRootAsPlayerLoadout(ByteBuffer _bb, PlayerLoadout obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerLoadout __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long teamColorId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long customColorId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long carId() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long decalId() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long wheelsId() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long boostId() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long antennaId() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long hatId() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long paintFinishId() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long customFinishId() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long engineAudioId() { int o = __offset(24); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long trailsId() { int o = __offset(26); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long goalExplosionId() { int o = __offset(28); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public rlbot.flat.LoadoutPaint loadoutPaint() { return loadoutPaint(new rlbot.flat.LoadoutPaint()); }
  public rlbot.flat.LoadoutPaint loadoutPaint(rlbot.flat.LoadoutPaint obj) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Sets the primary color of the car to the swatch that most closely matches the provided
   * RGB color value. If set, this overrides teamColorId.
   */
  public rlbot.flat.Color primaryColorLookup() { return primaryColorLookup(new rlbot.flat.Color()); }
  public rlbot.flat.Color primaryColorLookup(rlbot.flat.Color obj) { int o = __offset(32); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * Sets the secondary color of the car to the swatch that most closely matches the provided
   * RGB color value. If set, this overrides customColorId.
   */
  public rlbot.flat.Color secondaryColorLookup() { return secondaryColorLookup(new rlbot.flat.Color()); }
  public rlbot.flat.Color secondaryColorLookup(rlbot.flat.Color obj) { int o = __offset(34); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startPlayerLoadout(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addTeamColorId(FlatBufferBuilder builder, long teamColorId) { builder.addInt(0, (int) teamColorId, (int) 0L); }
  public static void addCustomColorId(FlatBufferBuilder builder, long customColorId) { builder.addInt(1, (int) customColorId, (int) 0L); }
  public static void addCarId(FlatBufferBuilder builder, long carId) { builder.addInt(2, (int) carId, (int) 0L); }
  public static void addDecalId(FlatBufferBuilder builder, long decalId) { builder.addInt(3, (int) decalId, (int) 0L); }
  public static void addWheelsId(FlatBufferBuilder builder, long wheelsId) { builder.addInt(4, (int) wheelsId, (int) 0L); }
  public static void addBoostId(FlatBufferBuilder builder, long boostId) { builder.addInt(5, (int) boostId, (int) 0L); }
  public static void addAntennaId(FlatBufferBuilder builder, long antennaId) { builder.addInt(6, (int) antennaId, (int) 0L); }
  public static void addHatId(FlatBufferBuilder builder, long hatId) { builder.addInt(7, (int) hatId, (int) 0L); }
  public static void addPaintFinishId(FlatBufferBuilder builder, long paintFinishId) { builder.addInt(8, (int) paintFinishId, (int) 0L); }
  public static void addCustomFinishId(FlatBufferBuilder builder, long customFinishId) { builder.addInt(9, (int) customFinishId, (int) 0L); }
  public static void addEngineAudioId(FlatBufferBuilder builder, long engineAudioId) { builder.addInt(10, (int) engineAudioId, (int) 0L); }
  public static void addTrailsId(FlatBufferBuilder builder, long trailsId) { builder.addInt(11, (int) trailsId, (int) 0L); }
  public static void addGoalExplosionId(FlatBufferBuilder builder, long goalExplosionId) { builder.addInt(12, (int) goalExplosionId, (int) 0L); }
  public static void addLoadoutPaint(FlatBufferBuilder builder, int loadoutPaintOffset) { builder.addOffset(13, loadoutPaintOffset, 0); }
  public static void addPrimaryColorLookup(FlatBufferBuilder builder, int primaryColorLookupOffset) { builder.addStruct(14, primaryColorLookupOffset, 0); }
  public static void addSecondaryColorLookup(FlatBufferBuilder builder, int secondaryColorLookupOffset) { builder.addStruct(15, secondaryColorLookupOffset, 0); }
  public static int endPlayerLoadout(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerLoadout get(int j) { return get(new PlayerLoadout(), j); }
    public PlayerLoadout get(PlayerLoadout obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlayerLoadoutT unpack() {
    PlayerLoadoutT _o = new PlayerLoadoutT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlayerLoadoutT _o) {
    long _oTeamColorId = teamColorId();
    _o.setTeamColorId(_oTeamColorId);
    long _oCustomColorId = customColorId();
    _o.setCustomColorId(_oCustomColorId);
    long _oCarId = carId();
    _o.setCarId(_oCarId);
    long _oDecalId = decalId();
    _o.setDecalId(_oDecalId);
    long _oWheelsId = wheelsId();
    _o.setWheelsId(_oWheelsId);
    long _oBoostId = boostId();
    _o.setBoostId(_oBoostId);
    long _oAntennaId = antennaId();
    _o.setAntennaId(_oAntennaId);
    long _oHatId = hatId();
    _o.setHatId(_oHatId);
    long _oPaintFinishId = paintFinishId();
    _o.setPaintFinishId(_oPaintFinishId);
    long _oCustomFinishId = customFinishId();
    _o.setCustomFinishId(_oCustomFinishId);
    long _oEngineAudioId = engineAudioId();
    _o.setEngineAudioId(_oEngineAudioId);
    long _oTrailsId = trailsId();
    _o.setTrailsId(_oTrailsId);
    long _oGoalExplosionId = goalExplosionId();
    _o.setGoalExplosionId(_oGoalExplosionId);
    if (loadoutPaint() != null) _o.setLoadoutPaint(loadoutPaint().unpack());
    else _o.setLoadoutPaint(null);
    if (primaryColorLookup() != null) primaryColorLookup().unpackTo(_o.getPrimaryColorLookup());
    else _o.setPrimaryColorLookup(null);
    if (secondaryColorLookup() != null) secondaryColorLookup().unpackTo(_o.getSecondaryColorLookup());
    else _o.setSecondaryColorLookup(null);
  }
  public static int pack(FlatBufferBuilder builder, PlayerLoadoutT _o) {
    if (_o == null) return 0;
    int _loadoutPaint = _o.getLoadoutPaint() == null ? 0 : rlbot.flat.LoadoutPaint.pack(builder, _o.getLoadoutPaint());
    startPlayerLoadout(builder);
    addTeamColorId(builder, _o.getTeamColorId());
    addCustomColorId(builder, _o.getCustomColorId());
    addCarId(builder, _o.getCarId());
    addDecalId(builder, _o.getDecalId());
    addWheelsId(builder, _o.getWheelsId());
    addBoostId(builder, _o.getBoostId());
    addAntennaId(builder, _o.getAntennaId());
    addHatId(builder, _o.getHatId());
    addPaintFinishId(builder, _o.getPaintFinishId());
    addCustomFinishId(builder, _o.getCustomFinishId());
    addEngineAudioId(builder, _o.getEngineAudioId());
    addTrailsId(builder, _o.getTrailsId());
    addGoalExplosionId(builder, _o.getGoalExplosionId());
    addLoadoutPaint(builder, _loadoutPaint);
    addPrimaryColorLookup(builder, rlbot.flat.Color.pack(builder, _o.getPrimaryColorLookup()));
    addSecondaryColorLookup(builder, rlbot.flat.Color.pack(builder, _o.getSecondaryColorLookup()));
    return endPlayerLoadout(builder);
  }
}

