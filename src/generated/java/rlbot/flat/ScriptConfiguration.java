// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A ScriptConfiguration defines a script of a match.
 */
@SuppressWarnings("unused")
public final class ScriptConfiguration extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ScriptConfiguration getRootAsScriptConfiguration(ByteBuffer _bb) { return getRootAsScriptConfiguration(_bb, new ScriptConfiguration()); }
  public static ScriptConfiguration getRootAsScriptConfiguration(ByteBuffer _bb, ScriptConfiguration obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ScriptConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The name of the script.
   */
  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The root directory of the script and the working directory for the run command.
   */
  public String rootDir() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rootDirAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer rootDirInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * A console command that will start up the script.
   */
  public String runCommand() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer runCommandAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer runCommandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The id of the script.
   * This value is mostly used internally to keep track of participants in the match.
   */
  public int scriptId() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * A unique user-defined string that is used to connect clients to the right players/scripts.
   * If a bot/script has a run command, RLBot will pass this agent id to the process using an environment variable, RLBOT_AGENT_ID.
   * Upon connecting the process announces that it is responsible for this agent id and RLBot will pair the two.
   * The recommended format for agent ids is "developername/botname".
   */
  public String agentId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agentIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer agentIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createScriptConfiguration(FlatBufferBuilder builder,
      int nameOffset,
      int rootDirOffset,
      int runCommandOffset,
      int scriptId,
      int agentIdOffset) {
    builder.startTable(5);
    ScriptConfiguration.addAgentId(builder, agentIdOffset);
    ScriptConfiguration.addScriptId(builder, scriptId);
    ScriptConfiguration.addRunCommand(builder, runCommandOffset);
    ScriptConfiguration.addRootDir(builder, rootDirOffset);
    ScriptConfiguration.addName(builder, nameOffset);
    return ScriptConfiguration.endScriptConfiguration(builder);
  }

  public static void startScriptConfiguration(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addRootDir(FlatBufferBuilder builder, int rootDirOffset) { builder.addOffset(1, rootDirOffset, 0); }
  public static void addRunCommand(FlatBufferBuilder builder, int runCommandOffset) { builder.addOffset(2, runCommandOffset, 0); }
  public static void addScriptId(FlatBufferBuilder builder, int scriptId) { builder.addInt(3, scriptId, 0); }
  public static void addAgentId(FlatBufferBuilder builder, int agentIdOffset) { builder.addOffset(4, agentIdOffset, 0); }
  public static int endScriptConfiguration(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // name
    builder.required(o, 6);  // root_dir
    builder.required(o, 8);  // run_command
    builder.required(o, 12);  // agent_id
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ScriptConfiguration get(int j) { return get(new ScriptConfiguration(), j); }
    public ScriptConfiguration get(ScriptConfiguration obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ScriptConfigurationT unpack() {
    ScriptConfigurationT _o = new ScriptConfigurationT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ScriptConfigurationT _o) {
    String _oName = name();
    _o.setName(_oName);
    String _oRootDir = rootDir();
    _o.setRootDir(_oRootDir);
    String _oRunCommand = runCommand();
    _o.setRunCommand(_oRunCommand);
    int _oScriptId = scriptId();
    _o.setScriptId(_oScriptId);
    String _oAgentId = agentId();
    _o.setAgentId(_oAgentId);
  }
  public static int pack(FlatBufferBuilder builder, ScriptConfigurationT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _rootDir = _o.getRootDir() == null ? 0 : builder.createString(_o.getRootDir());
    int _runCommand = _o.getRunCommand() == null ? 0 : builder.createString(_o.getRunCommand());
    int _agentId = _o.getAgentId() == null ? 0 : builder.createString(_o.getAgentId());
    return createScriptConfiguration(
      builder,
      _name,
      _rootDir,
      _runCommand,
      _o.getScriptId(),
      _agentId);
  }
}

