// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * All mutators options.
 */
@SuppressWarnings("unused")
public final class MutatorSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static MutatorSettings getRootAsMutatorSettings(ByteBuffer _bb) { return getRootAsMutatorSettings(_bb, new MutatorSettings()); }
  public static MutatorSettings getRootAsMutatorSettings(ByteBuffer _bb, MutatorSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MutatorSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Duration of the match.
   */
  public int matchLength() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Max score of match. If this score is reached, the team immediately wins.
   */
  public int maxScore() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The number of balls.
   */
  public int multiBall() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The overtime rules and tiebreaker.
   */
  public int overtime() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The series length.
   */
  public int seriesLength() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * A game speed multiplier.
   */
  public int gameSpeed() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball max speed.
   */
  public int ballMaxSpeed() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball type and shape.
   */
  public int ballType() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball weight and how much is curves.
   */
  public int ballWeight() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball size.
   */
  public int ballSize() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball bounciness.
   */
  public int ballBounciness() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Boost amount/recharge.
   */
  public int boostAmount() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Rumble item rules.
   */
  public int rumble() { int o = __offset(28); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Boost strength multiplier.
   */
  public int boostStrength() { int o = __offset(30); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Strength of gravity.
   */
  public int gravity() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Demolition conditions.
   */
  public int demolish() { int o = __offset(34); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Demolition respawn time.
   */
  public int respawnTime() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Max real-time duration of match including kickoff, replays, and more.
   * If the score is tied upon time-out, the number of shots determine the winner.
   */
  public int maxTime() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Additional game behaviour for custom modes.
   */
  public int gameEvent() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Additional audio options for custom modes.
   */
  public int audio() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Ball gravity.
   */
  public int ballGravity() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Territory mutator.
   */
  public int territory() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Stale ball mutator.
   */
  public int staleBall() { int o = __offset(48); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Jumps mutator.
   */
  public int jump() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Dodge timer mutator.
   */
  public int dodgeTimer() { int o = __offset(52); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Possession score mutator.
   */
  public int possessionScore() { int o = __offset(54); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Demolish score mutator.
   */
  public int demolishScore() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Normal goal score mutator.
   */
  public int normalGoalScore() { int o = __offset(58); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Aerial goal score mutator.
   */
  public int aerialGoalScore() { int o = __offset(60); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Assist goal score mutator.
   */
  public int assistGoalScore() { int o = __offset(62); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Player input restriction mutator.
   */
  public int inputRestriction() { int o = __offset(64); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * Additional rules about scoring (ball-goal interaction).
   */
  public int scoringRule() { int o = __offset(66); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createMutatorSettings(FlatBufferBuilder builder,
      int matchLength,
      int maxScore,
      int multiBall,
      int overtime,
      int seriesLength,
      int gameSpeed,
      int ballMaxSpeed,
      int ballType,
      int ballWeight,
      int ballSize,
      int ballBounciness,
      int boostAmount,
      int rumble,
      int boostStrength,
      int gravity,
      int demolish,
      int respawnTime,
      int maxTime,
      int gameEvent,
      int audio,
      int ballGravity,
      int territory,
      int staleBall,
      int jump,
      int dodgeTimer,
      int possessionScore,
      int demolishScore,
      int normalGoalScore,
      int aerialGoalScore,
      int assistGoalScore,
      int inputRestriction,
      int scoringRule) {
    builder.startTable(32);
    MutatorSettings.addScoringRule(builder, scoringRule);
    MutatorSettings.addInputRestriction(builder, inputRestriction);
    MutatorSettings.addAssistGoalScore(builder, assistGoalScore);
    MutatorSettings.addAerialGoalScore(builder, aerialGoalScore);
    MutatorSettings.addNormalGoalScore(builder, normalGoalScore);
    MutatorSettings.addDemolishScore(builder, demolishScore);
    MutatorSettings.addPossessionScore(builder, possessionScore);
    MutatorSettings.addDodgeTimer(builder, dodgeTimer);
    MutatorSettings.addJump(builder, jump);
    MutatorSettings.addStaleBall(builder, staleBall);
    MutatorSettings.addTerritory(builder, territory);
    MutatorSettings.addBallGravity(builder, ballGravity);
    MutatorSettings.addAudio(builder, audio);
    MutatorSettings.addGameEvent(builder, gameEvent);
    MutatorSettings.addMaxTime(builder, maxTime);
    MutatorSettings.addRespawnTime(builder, respawnTime);
    MutatorSettings.addDemolish(builder, demolish);
    MutatorSettings.addGravity(builder, gravity);
    MutatorSettings.addBoostStrength(builder, boostStrength);
    MutatorSettings.addRumble(builder, rumble);
    MutatorSettings.addBoostAmount(builder, boostAmount);
    MutatorSettings.addBallBounciness(builder, ballBounciness);
    MutatorSettings.addBallSize(builder, ballSize);
    MutatorSettings.addBallWeight(builder, ballWeight);
    MutatorSettings.addBallType(builder, ballType);
    MutatorSettings.addBallMaxSpeed(builder, ballMaxSpeed);
    MutatorSettings.addGameSpeed(builder, gameSpeed);
    MutatorSettings.addSeriesLength(builder, seriesLength);
    MutatorSettings.addOvertime(builder, overtime);
    MutatorSettings.addMultiBall(builder, multiBall);
    MutatorSettings.addMaxScore(builder, maxScore);
    MutatorSettings.addMatchLength(builder, matchLength);
    return MutatorSettings.endMutatorSettings(builder);
  }

  public static void startMutatorSettings(FlatBufferBuilder builder) { builder.startTable(32); }
  public static void addMatchLength(FlatBufferBuilder builder, int matchLength) { builder.addByte(0, (byte) matchLength, (byte) 0); }
  public static void addMaxScore(FlatBufferBuilder builder, int maxScore) { builder.addByte(1, (byte) maxScore, (byte) 0); }
  public static void addMultiBall(FlatBufferBuilder builder, int multiBall) { builder.addByte(2, (byte) multiBall, (byte) 0); }
  public static void addOvertime(FlatBufferBuilder builder, int overtime) { builder.addByte(3, (byte) overtime, (byte) 0); }
  public static void addSeriesLength(FlatBufferBuilder builder, int seriesLength) { builder.addByte(4, (byte) seriesLength, (byte) 0); }
  public static void addGameSpeed(FlatBufferBuilder builder, int gameSpeed) { builder.addByte(5, (byte) gameSpeed, (byte) 0); }
  public static void addBallMaxSpeed(FlatBufferBuilder builder, int ballMaxSpeed) { builder.addByte(6, (byte) ballMaxSpeed, (byte) 0); }
  public static void addBallType(FlatBufferBuilder builder, int ballType) { builder.addByte(7, (byte) ballType, (byte) 0); }
  public static void addBallWeight(FlatBufferBuilder builder, int ballWeight) { builder.addByte(8, (byte) ballWeight, (byte) 0); }
  public static void addBallSize(FlatBufferBuilder builder, int ballSize) { builder.addByte(9, (byte) ballSize, (byte) 0); }
  public static void addBallBounciness(FlatBufferBuilder builder, int ballBounciness) { builder.addByte(10, (byte) ballBounciness, (byte) 0); }
  public static void addBoostAmount(FlatBufferBuilder builder, int boostAmount) { builder.addByte(11, (byte) boostAmount, (byte) 0); }
  public static void addRumble(FlatBufferBuilder builder, int rumble) { builder.addByte(12, (byte) rumble, (byte) 0); }
  public static void addBoostStrength(FlatBufferBuilder builder, int boostStrength) { builder.addByte(13, (byte) boostStrength, (byte) 0); }
  public static void addGravity(FlatBufferBuilder builder, int gravity) { builder.addByte(14, (byte) gravity, (byte) 0); }
  public static void addDemolish(FlatBufferBuilder builder, int demolish) { builder.addByte(15, (byte) demolish, (byte) 0); }
  public static void addRespawnTime(FlatBufferBuilder builder, int respawnTime) { builder.addByte(16, (byte) respawnTime, (byte) 0); }
  public static void addMaxTime(FlatBufferBuilder builder, int maxTime) { builder.addByte(17, (byte) maxTime, (byte) 0); }
  public static void addGameEvent(FlatBufferBuilder builder, int gameEvent) { builder.addByte(18, (byte) gameEvent, (byte) 0); }
  public static void addAudio(FlatBufferBuilder builder, int audio) { builder.addByte(19, (byte) audio, (byte) 0); }
  public static void addBallGravity(FlatBufferBuilder builder, int ballGravity) { builder.addByte(20, (byte) ballGravity, (byte) 0); }
  public static void addTerritory(FlatBufferBuilder builder, int territory) { builder.addByte(21, (byte) territory, (byte) 0); }
  public static void addStaleBall(FlatBufferBuilder builder, int staleBall) { builder.addByte(22, (byte) staleBall, (byte) 0); }
  public static void addJump(FlatBufferBuilder builder, int jump) { builder.addByte(23, (byte) jump, (byte) 0); }
  public static void addDodgeTimer(FlatBufferBuilder builder, int dodgeTimer) { builder.addByte(24, (byte) dodgeTimer, (byte) 0); }
  public static void addPossessionScore(FlatBufferBuilder builder, int possessionScore) { builder.addByte(25, (byte) possessionScore, (byte) 0); }
  public static void addDemolishScore(FlatBufferBuilder builder, int demolishScore) { builder.addByte(26, (byte) demolishScore, (byte) 0); }
  public static void addNormalGoalScore(FlatBufferBuilder builder, int normalGoalScore) { builder.addByte(27, (byte) normalGoalScore, (byte) 0); }
  public static void addAerialGoalScore(FlatBufferBuilder builder, int aerialGoalScore) { builder.addByte(28, (byte) aerialGoalScore, (byte) 0); }
  public static void addAssistGoalScore(FlatBufferBuilder builder, int assistGoalScore) { builder.addByte(29, (byte) assistGoalScore, (byte) 0); }
  public static void addInputRestriction(FlatBufferBuilder builder, int inputRestriction) { builder.addByte(30, (byte) inputRestriction, (byte) 0); }
  public static void addScoringRule(FlatBufferBuilder builder, int scoringRule) { builder.addByte(31, (byte) scoringRule, (byte) 0); }
  public static int endMutatorSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MutatorSettings get(int j) { return get(new MutatorSettings(), j); }
    public MutatorSettings get(MutatorSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MutatorSettingsT unpack() {
    MutatorSettingsT _o = new MutatorSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MutatorSettingsT _o) {
    int _oMatchLength = matchLength();
    _o.setMatchLength(_oMatchLength);
    int _oMaxScore = maxScore();
    _o.setMaxScore(_oMaxScore);
    int _oMultiBall = multiBall();
    _o.setMultiBall(_oMultiBall);
    int _oOvertime = overtime();
    _o.setOvertime(_oOvertime);
    int _oSeriesLength = seriesLength();
    _o.setSeriesLength(_oSeriesLength);
    int _oGameSpeed = gameSpeed();
    _o.setGameSpeed(_oGameSpeed);
    int _oBallMaxSpeed = ballMaxSpeed();
    _o.setBallMaxSpeed(_oBallMaxSpeed);
    int _oBallType = ballType();
    _o.setBallType(_oBallType);
    int _oBallWeight = ballWeight();
    _o.setBallWeight(_oBallWeight);
    int _oBallSize = ballSize();
    _o.setBallSize(_oBallSize);
    int _oBallBounciness = ballBounciness();
    _o.setBallBounciness(_oBallBounciness);
    int _oBoostAmount = boostAmount();
    _o.setBoostAmount(_oBoostAmount);
    int _oRumble = rumble();
    _o.setRumble(_oRumble);
    int _oBoostStrength = boostStrength();
    _o.setBoostStrength(_oBoostStrength);
    int _oGravity = gravity();
    _o.setGravity(_oGravity);
    int _oDemolish = demolish();
    _o.setDemolish(_oDemolish);
    int _oRespawnTime = respawnTime();
    _o.setRespawnTime(_oRespawnTime);
    int _oMaxTime = maxTime();
    _o.setMaxTime(_oMaxTime);
    int _oGameEvent = gameEvent();
    _o.setGameEvent(_oGameEvent);
    int _oAudio = audio();
    _o.setAudio(_oAudio);
    int _oBallGravity = ballGravity();
    _o.setBallGravity(_oBallGravity);
    int _oTerritory = territory();
    _o.setTerritory(_oTerritory);
    int _oStaleBall = staleBall();
    _o.setStaleBall(_oStaleBall);
    int _oJump = jump();
    _o.setJump(_oJump);
    int _oDodgeTimer = dodgeTimer();
    _o.setDodgeTimer(_oDodgeTimer);
    int _oPossessionScore = possessionScore();
    _o.setPossessionScore(_oPossessionScore);
    int _oDemolishScore = demolishScore();
    _o.setDemolishScore(_oDemolishScore);
    int _oNormalGoalScore = normalGoalScore();
    _o.setNormalGoalScore(_oNormalGoalScore);
    int _oAerialGoalScore = aerialGoalScore();
    _o.setAerialGoalScore(_oAerialGoalScore);
    int _oAssistGoalScore = assistGoalScore();
    _o.setAssistGoalScore(_oAssistGoalScore);
    int _oInputRestriction = inputRestriction();
    _o.setInputRestriction(_oInputRestriction);
    int _oScoringRule = scoringRule();
    _o.setScoringRule(_oScoringRule);
  }
  public static int pack(FlatBufferBuilder builder, MutatorSettingsT _o) {
    if (_o == null) return 0;
    return createMutatorSettings(
      builder,
      _o.getMatchLength(),
      _o.getMaxScore(),
      _o.getMultiBall(),
      _o.getOvertime(),
      _o.getSeriesLength(),
      _o.getGameSpeed(),
      _o.getBallMaxSpeed(),
      _o.getBallType(),
      _o.getBallWeight(),
      _o.getBallSize(),
      _o.getBallBounciness(),
      _o.getBoostAmount(),
      _o.getRumble(),
      _o.getBoostStrength(),
      _o.getGravity(),
      _o.getDemolish(),
      _o.getRespawnTime(),
      _o.getMaxTime(),
      _o.getGameEvent(),
      _o.getAudio(),
      _o.getBallGravity(),
      _o.getTerritory(),
      _o.getStaleBall(),
      _o.getJump(),
      _o.getDodgeTimer(),
      _o.getPossessionScore(),
      _o.getDemolishScore(),
      _o.getNormalGoalScore(),
      _o.getAerialGoalScore(),
      _o.getAssistGoalScore(),
      _o.getInputRestriction(),
      _o.getScoringRule());
  }
}

