// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * The state of a boost pad.
 * Note, static properties of boost pads, such as their location and size, are found in the field info.
 */
@SuppressWarnings("unused")
public final class BoostPadState extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BoostPadState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * True if the boost can be picked up right now.
   */
  public boolean isActive() { return 0!=bb.get(bb_pos + 0); }
  /**
   * The number of seconds since the boost has been picked up, or 0 if the boost is active.
   * A big boost pad becomes active again after 10 seconds.
   * A small boost pad becomes active again after 4 seconds.
   */
  public float timer() { return bb.getFloat(bb_pos + 4); }

  public static int createBoostPadState(FlatBufferBuilder builder, boolean isActive, float timer) {
    builder.prep(4, 8);
    builder.putFloat(timer);
    builder.pad(3);
    builder.putBoolean(isActive);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BoostPadState get(int j) { return get(new BoostPadState(), j); }
    public BoostPadState get(BoostPadState obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public BoostPadStateT unpack() {
    BoostPadStateT _o = new BoostPadStateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BoostPadStateT _o) {
    boolean _oIsActive = isActive();
    _o.setIsActive(_oIsActive);
    float _oTimer = timer();
    _o.setTimer(_oTimer);
  }
  public static int pack(FlatBufferBuilder builder, BoostPadStateT _o) {
    if (_o == null) return 0;
    return createBoostPadState(
      builder,
      _o.getIsActive(),
      _o.getTimer());
  }
}

