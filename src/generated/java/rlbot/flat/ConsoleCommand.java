// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A console command which will be executed inside Rocket League.
 * See https://wiki.rlbot.org/framework/console-commands/ for a list of known commands.
 */
@SuppressWarnings("unused")
public final class ConsoleCommand extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ConsoleCommand getRootAsConsoleCommand(ByteBuffer _bb) { return getRootAsConsoleCommand(_bb, new ConsoleCommand()); }
  public static ConsoleCommand getRootAsConsoleCommand(ByteBuffer _bb, ConsoleCommand obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ConsoleCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String command() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commandAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer commandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createConsoleCommand(FlatBufferBuilder builder,
      int commandOffset) {
    builder.startTable(1);
    ConsoleCommand.addCommand(builder, commandOffset);
    return ConsoleCommand.endConsoleCommand(builder);
  }

  public static void startConsoleCommand(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addCommand(FlatBufferBuilder builder, int commandOffset) { builder.addOffset(0, commandOffset, 0); }
  public static int endConsoleCommand(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // command
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ConsoleCommand get(int j) { return get(new ConsoleCommand(), j); }
    public ConsoleCommand get(ConsoleCommand obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ConsoleCommandT unpack() {
    ConsoleCommandT _o = new ConsoleCommandT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ConsoleCommandT _o) {
    String _oCommand = command();
    _o.setCommand(_oCommand);
  }
  public static int pack(FlatBufferBuilder builder, ConsoleCommandT _o) {
    if (_o == null) return 0;
    int _command = _o.getCommand() == null ? 0 : builder.createString(_o.getCommand());
    return createConsoleCommand(
      builder,
      _command);
  }
}

