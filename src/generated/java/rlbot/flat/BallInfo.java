// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Information about a ball.
 */
@SuppressWarnings("unused")
public final class BallInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static BallInfo getRootAsBallInfo(ByteBuffer _bb) { return getRootAsBallInfo(_bb, new BallInfo()); }
  public static BallInfo getRootAsBallInfo(ByteBuffer _bb, BallInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BallInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The physical state of the ball.
   */
  public rlbot.flat.Physics physics() { return physics(new rlbot.flat.Physics()); }
  public rlbot.flat.Physics physics(rlbot.flat.Physics obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public byte shapeType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The collision shape of the ball.
   */
  public Table shape(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static void startBallInfo(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPhysics(FlatBufferBuilder builder, int physicsOffset) { builder.addStruct(0, physicsOffset, 0); }
  public static void addShapeType(FlatBufferBuilder builder, byte shapeType) { builder.addByte(1, shapeType, 0); }
  public static void addShape(FlatBufferBuilder builder, int shapeOffset) { builder.addOffset(2, shapeOffset, 0); }
  public static int endBallInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // physics
    builder.required(o, 8);  // shape
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BallInfo get(int j) { return get(new BallInfo(), j); }
    public BallInfo get(BallInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BallInfoT unpack() {
    BallInfoT _o = new BallInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BallInfoT _o) {
    if (physics() != null) physics().unpackTo(_o.getPhysics());
    else _o.setPhysics(null);
    rlbot.flat.CollisionShapeUnion _oShape = new rlbot.flat.CollisionShapeUnion();
    byte _oShapeType = shapeType();
    _oShape.setType(_oShapeType);
    Table _oShapeValue;
    switch (_oShapeType) {
      case rlbot.flat.CollisionShape.BoxShape:
        _oShapeValue = shape(new rlbot.flat.BoxShape());
        _oShape.setValue(_oShapeValue != null ? ((rlbot.flat.BoxShape) _oShapeValue).unpack() : null);
        break;
      case rlbot.flat.CollisionShape.SphereShape:
        _oShapeValue = shape(new rlbot.flat.SphereShape());
        _oShape.setValue(_oShapeValue != null ? ((rlbot.flat.SphereShape) _oShapeValue).unpack() : null);
        break;
      case rlbot.flat.CollisionShape.CylinderShape:
        _oShapeValue = shape(new rlbot.flat.CylinderShape());
        _oShape.setValue(_oShapeValue != null ? ((rlbot.flat.CylinderShape) _oShapeValue).unpack() : null);
        break;
      default: break;
    }
    _o.setShape(_oShape);
  }
  public static int pack(FlatBufferBuilder builder, BallInfoT _o) {
    if (_o == null) return 0;
    byte _shapeType = _o.getShape() == null ? rlbot.flat.CollisionShape.NONE : _o.getShape().getType();
    int _shape = _o.getShape() == null ? 0 : rlbot.flat.CollisionShapeUnion.pack(builder, _o.getShape());
    startBallInfo(builder);
    addPhysics(builder, rlbot.flat.Physics.pack(builder, _o.getPhysics()));
    addShapeType(builder, _shapeType);
    addShape(builder, _shape);
    return endBallInfo(builder);
  }
}

