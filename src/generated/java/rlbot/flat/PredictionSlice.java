// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * An entry in the ball prediction describing where a ball will be at some future time.
 */
@SuppressWarnings("unused")
public final class PredictionSlice extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PredictionSlice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The moment in game time that this prediction corresponds to.
   * This corresponds to 'seconds_elapsed' in the MatchInfo.
   */
  public float gameSeconds() { return bb.getFloat(bb_pos + 0); }
  /**
   * The predicted location and motion of the object.
   */
  public rlbot.flat.Physics physics() { return physics(new rlbot.flat.Physics()); }
  public rlbot.flat.Physics physics(rlbot.flat.Physics obj) { return obj.__assign(bb_pos + 4, bb); }

  public static int createPredictionSlice(FlatBufferBuilder builder, float gameSeconds, float physics_location_x, float physics_location_y, float physics_location_z, float physics_rotation_pitch, float physics_rotation_yaw, float physics_rotation_roll, float physics_velocity_x, float physics_velocity_y, float physics_velocity_z, float physics_angular_velocity_x, float physics_angular_velocity_y, float physics_angular_velocity_z) {
    builder.prep(4, 52);
    builder.prep(4, 48);
    builder.prep(4, 12);
    builder.putFloat(physics_angular_velocity_z);
    builder.putFloat(physics_angular_velocity_y);
    builder.putFloat(physics_angular_velocity_x);
    builder.prep(4, 12);
    builder.putFloat(physics_velocity_z);
    builder.putFloat(physics_velocity_y);
    builder.putFloat(physics_velocity_x);
    builder.prep(4, 12);
    builder.putFloat(physics_rotation_roll);
    builder.putFloat(physics_rotation_yaw);
    builder.putFloat(physics_rotation_pitch);
    builder.prep(4, 12);
    builder.putFloat(physics_location_z);
    builder.putFloat(physics_location_y);
    builder.putFloat(physics_location_x);
    builder.putFloat(gameSeconds);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PredictionSlice get(int j) { return get(new PredictionSlice(), j); }
    public PredictionSlice get(PredictionSlice obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public PredictionSliceT unpack() {
    PredictionSliceT _o = new PredictionSliceT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PredictionSliceT _o) {
    float _oGameSeconds = gameSeconds();
    _o.setGameSeconds(_oGameSeconds);
    physics().unpackTo(_o.getPhysics());
  }
  public static int pack(FlatBufferBuilder builder, PredictionSliceT _o) {
    if (_o == null) return 0;
    float _physics_location_x = _o.getPhysics().getLocation().getX();
    float _physics_location_y = _o.getPhysics().getLocation().getY();
    float _physics_location_z = _o.getPhysics().getLocation().getZ();
    float _physics_rotation_pitch = _o.getPhysics().getRotation().getPitch();
    float _physics_rotation_yaw = _o.getPhysics().getRotation().getYaw();
    float _physics_rotation_roll = _o.getPhysics().getRotation().getRoll();
    float _physics_velocity_x = _o.getPhysics().getVelocity().getX();
    float _physics_velocity_y = _o.getPhysics().getVelocity().getY();
    float _physics_velocity_z = _o.getPhysics().getVelocity().getZ();
    float _physics_angularVelocity_x = _o.getPhysics().getAngularVelocity().getX();
    float _physics_angularVelocity_y = _o.getPhysics().getAngularVelocity().getY();
    float _physics_angularVelocity_z = _o.getPhysics().getAngularVelocity().getZ();
    return createPredictionSlice(
      builder,
      _o.getGameSeconds(),
      _physics_location_x,
      _physics_location_y,
      _physics_location_z,
      _physics_rotation_pitch,
      _physics_rotation_yaw,
      _physics_rotation_roll,
      _physics_velocity_x,
      _physics_velocity_y,
      _physics_velocity_z,
      _physics_angularVelocity_x,
      _physics_angularVelocity_y,
      _physics_angularVelocity_z);
  }
}

