// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * The physical state of an object.
 */
@SuppressWarnings("unused")
public final class Physics extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Physics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.Vector3 location() { return location(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 location(rlbot.flat.Vector3 obj) { return obj.__assign(bb_pos + 0, bb); }
  public rlbot.flat.Rotator rotation() { return rotation(new rlbot.flat.Rotator()); }
  public rlbot.flat.Rotator rotation(rlbot.flat.Rotator obj) { return obj.__assign(bb_pos + 12, bb); }
  public rlbot.flat.Vector3 velocity() { return velocity(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 velocity(rlbot.flat.Vector3 obj) { return obj.__assign(bb_pos + 24, bb); }
  public rlbot.flat.Vector3 angularVelocity() { return angularVelocity(new rlbot.flat.Vector3()); }
  public rlbot.flat.Vector3 angularVelocity(rlbot.flat.Vector3 obj) { return obj.__assign(bb_pos + 36, bb); }

  public static int createPhysics(FlatBufferBuilder builder, float location_x, float location_y, float location_z, float rotation_pitch, float rotation_yaw, float rotation_roll, float velocity_x, float velocity_y, float velocity_z, float angular_velocity_x, float angular_velocity_y, float angular_velocity_z) {
    builder.prep(4, 48);
    builder.prep(4, 12);
    builder.putFloat(angular_velocity_z);
    builder.putFloat(angular_velocity_y);
    builder.putFloat(angular_velocity_x);
    builder.prep(4, 12);
    builder.putFloat(velocity_z);
    builder.putFloat(velocity_y);
    builder.putFloat(velocity_x);
    builder.prep(4, 12);
    builder.putFloat(rotation_roll);
    builder.putFloat(rotation_yaw);
    builder.putFloat(rotation_pitch);
    builder.prep(4, 12);
    builder.putFloat(location_z);
    builder.putFloat(location_y);
    builder.putFloat(location_x);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Physics get(int j) { return get(new Physics(), j); }
    public Physics get(Physics obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public PhysicsT unpack() {
    PhysicsT _o = new PhysicsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PhysicsT _o) {
    location().unpackTo(_o.getLocation());
    rotation().unpackTo(_o.getRotation());
    velocity().unpackTo(_o.getVelocity());
    angularVelocity().unpackTo(_o.getAngularVelocity());
  }
  public static int pack(FlatBufferBuilder builder, PhysicsT _o) {
    if (_o == null) return 0;
    float _location_x = _o.getLocation().getX();
    float _location_y = _o.getLocation().getY();
    float _location_z = _o.getLocation().getZ();
    float _rotation_pitch = _o.getRotation().getPitch();
    float _rotation_yaw = _o.getRotation().getYaw();
    float _rotation_roll = _o.getRotation().getRoll();
    float _velocity_x = _o.getVelocity().getX();
    float _velocity_y = _o.getVelocity().getY();
    float _velocity_z = _o.getVelocity().getZ();
    float _angularVelocity_x = _o.getAngularVelocity().getX();
    float _angularVelocity_y = _o.getAngularVelocity().getY();
    float _angularVelocity_z = _o.getAngularVelocity().getZ();
    return createPhysics(
      builder,
      _location_x,
      _location_y,
      _location_z,
      _rotation_pitch,
      _rotation_yaw,
      _rotation_roll,
      _velocity_x,
      _velocity_y,
      _velocity_z,
      _angularVelocity_x,
      _angularVelocity_y,
      _angularVelocity_z);
  }
}

