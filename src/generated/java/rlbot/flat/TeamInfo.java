// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Information about teams. Currently only the number of goals scored.
 */
@SuppressWarnings("unused")
public final class TeamInfo extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TeamInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The index of the team. Blue is 0, orange is 1.
   */
  public long teamIndex() { return (long)bb.getInt(bb_pos + 0) & 0xFFFFFFFFL; }
  /**
   * Number of goals scored.
   * Note, this value may be different than the sum of the goals scored by the current players on the team as player may join/leave the game or switch teams.
   * This value is what is shown on the heads-up display.
   */
  public long score() { return (long)bb.getInt(bb_pos + 4) & 0xFFFFFFFFL; }

  public static int createTeamInfo(FlatBufferBuilder builder, long teamIndex, long score) {
    builder.prep(4, 8);
    builder.putInt((int) score);
    builder.putInt((int) teamIndex);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TeamInfo get(int j) { return get(new TeamInfo(), j); }
    public TeamInfo get(TeamInfo obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public TeamInfoT unpack() {
    TeamInfoT _o = new TeamInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TeamInfoT _o) {
    long _oTeamIndex = teamIndex();
    _o.setTeamIndex(_oTeamIndex);
    long _oScore = score();
    _o.setScore(_oScore);
  }
  public static int pack(FlatBufferBuilder builder, TeamInfoT _o) {
    if (_o == null) return 0;
    return createTeamInfo(
      builder,
      _o.getTeamIndex(),
      _o.getScore());
  }
}

