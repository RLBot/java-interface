// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A game state with nullable subcomponents.
 * Used for game state setting to define which part of the game should change.
 * Values not set will not be updated.
 */
@SuppressWarnings("unused")
public final class DesiredGameState extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static DesiredGameState getRootAsDesiredGameState(ByteBuffer _bb) { return getRootAsDesiredGameState(_bb, new DesiredGameState()); }
  public static DesiredGameState getRootAsDesiredGameState(ByteBuffer _bb, DesiredGameState obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DesiredGameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * A list of desired ball states.
   */
  public rlbot.flat.DesiredBallState ballStates(int j) { return ballStates(new rlbot.flat.DesiredBallState(), j); }
  public rlbot.flat.DesiredBallState ballStates(rlbot.flat.DesiredBallState obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ballStatesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.DesiredBallState.Vector ballStatesVector() { return ballStatesVector(new rlbot.flat.DesiredBallState.Vector()); }
  public rlbot.flat.DesiredBallState.Vector ballStatesVector(rlbot.flat.DesiredBallState.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A list of desired car states.
   */
  public rlbot.flat.DesiredCarState carStates(int j) { return carStates(new rlbot.flat.DesiredCarState(), j); }
  public rlbot.flat.DesiredCarState carStates(rlbot.flat.DesiredCarState obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int carStatesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.DesiredCarState.Vector carStatesVector() { return carStatesVector(new rlbot.flat.DesiredCarState.Vector()); }
  public rlbot.flat.DesiredCarState.Vector carStatesVector(rlbot.flat.DesiredCarState.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The desired game info.
   */
  public rlbot.flat.DesiredMatchInfo matchInfo() { return matchInfo(new rlbot.flat.DesiredMatchInfo()); }
  public rlbot.flat.DesiredMatchInfo matchInfo(rlbot.flat.DesiredMatchInfo obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * A list of console commands to execute.
   * See https://wiki.rlbot.org/framework/console-commands/ for a list of known commands.
   */
  public rlbot.flat.ConsoleCommand consoleCommands(int j) { return consoleCommands(new rlbot.flat.ConsoleCommand(), j); }
  public rlbot.flat.ConsoleCommand consoleCommands(rlbot.flat.ConsoleCommand obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int consoleCommandsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.ConsoleCommand.Vector consoleCommandsVector() { return consoleCommandsVector(new rlbot.flat.ConsoleCommand.Vector()); }
  public rlbot.flat.ConsoleCommand.Vector consoleCommandsVector(rlbot.flat.ConsoleCommand.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDesiredGameState(FlatBufferBuilder builder,
      int ballStatesOffset,
      int carStatesOffset,
      int matchInfoOffset,
      int consoleCommandsOffset) {
    builder.startTable(4);
    DesiredGameState.addConsoleCommands(builder, consoleCommandsOffset);
    DesiredGameState.addMatchInfo(builder, matchInfoOffset);
    DesiredGameState.addCarStates(builder, carStatesOffset);
    DesiredGameState.addBallStates(builder, ballStatesOffset);
    return DesiredGameState.endDesiredGameState(builder);
  }

  public static void startDesiredGameState(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBallStates(FlatBufferBuilder builder, int ballStatesOffset) { builder.addOffset(0, ballStatesOffset, 0); }
  public static int createBallStatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBallStatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCarStates(FlatBufferBuilder builder, int carStatesOffset) { builder.addOffset(1, carStatesOffset, 0); }
  public static int createCarStatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCarStatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMatchInfo(FlatBufferBuilder builder, int matchInfoOffset) { builder.addOffset(2, matchInfoOffset, 0); }
  public static void addConsoleCommands(FlatBufferBuilder builder, int consoleCommandsOffset) { builder.addOffset(3, consoleCommandsOffset, 0); }
  public static int createConsoleCommandsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConsoleCommandsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDesiredGameState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // ball_states
    builder.required(o, 6);  // car_states
    builder.required(o, 10);  // console_commands
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DesiredGameState get(int j) { return get(new DesiredGameState(), j); }
    public DesiredGameState get(DesiredGameState obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DesiredGameStateT unpack() {
    DesiredGameStateT _o = new DesiredGameStateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DesiredGameStateT _o) {
    rlbot.flat.DesiredBallStateT[] _oBallStates = new rlbot.flat.DesiredBallStateT[ballStatesLength()];
    for (int _j = 0; _j < ballStatesLength(); ++_j) {_oBallStates[_j] = (ballStates(_j) != null ? ballStates(_j).unpack() : null);}
    _o.setBallStates(_oBallStates);
    rlbot.flat.DesiredCarStateT[] _oCarStates = new rlbot.flat.DesiredCarStateT[carStatesLength()];
    for (int _j = 0; _j < carStatesLength(); ++_j) {_oCarStates[_j] = (carStates(_j) != null ? carStates(_j).unpack() : null);}
    _o.setCarStates(_oCarStates);
    if (matchInfo() != null) _o.setMatchInfo(matchInfo().unpack());
    else _o.setMatchInfo(null);
    rlbot.flat.ConsoleCommandT[] _oConsoleCommands = new rlbot.flat.ConsoleCommandT[consoleCommandsLength()];
    for (int _j = 0; _j < consoleCommandsLength(); ++_j) {_oConsoleCommands[_j] = (consoleCommands(_j) != null ? consoleCommands(_j).unpack() : null);}
    _o.setConsoleCommands(_oConsoleCommands);
  }
  public static int pack(FlatBufferBuilder builder, DesiredGameStateT _o) {
    if (_o == null) return 0;
    int _ballStates = 0;
    if (_o.getBallStates() != null) {
      int[] __ballStates = new int[_o.getBallStates().length];
      int _j = 0;
      for (rlbot.flat.DesiredBallStateT _e : _o.getBallStates()) { __ballStates[_j] = rlbot.flat.DesiredBallState.pack(builder, _e); _j++;}
      _ballStates = createBallStatesVector(builder, __ballStates);
    }
    int _carStates = 0;
    if (_o.getCarStates() != null) {
      int[] __carStates = new int[_o.getCarStates().length];
      int _j = 0;
      for (rlbot.flat.DesiredCarStateT _e : _o.getCarStates()) { __carStates[_j] = rlbot.flat.DesiredCarState.pack(builder, _e); _j++;}
      _carStates = createCarStatesVector(builder, __carStates);
    }
    int _matchInfo = _o.getMatchInfo() == null ? 0 : rlbot.flat.DesiredMatchInfo.pack(builder, _o.getMatchInfo());
    int _consoleCommands = 0;
    if (_o.getConsoleCommands() != null) {
      int[] __consoleCommands = new int[_o.getConsoleCommands().length];
      int _j = 0;
      for (rlbot.flat.ConsoleCommandT _e : _o.getConsoleCommands()) { __consoleCommands[_j] = rlbot.flat.ConsoleCommand.pack(builder, _e); _j++;}
      _consoleCommands = createConsoleCommandsVector(builder, __consoleCommands);
    }
    return createDesiredGameState(
      builder,
      _ballStates,
      _carStates,
      _matchInfo,
      _consoleCommands);
  }
}

