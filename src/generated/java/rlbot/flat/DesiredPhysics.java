// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A physical state of an object, with nullable components.
 * Used for game state setting to define which part of a physics body should change.
 * If a component is null, then the component will keep its current value.
 */
@SuppressWarnings("unused")
public final class DesiredPhysics extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static DesiredPhysics getRootAsDesiredPhysics(ByteBuffer _bb) { return getRootAsDesiredPhysics(_bb, new DesiredPhysics()); }
  public static DesiredPhysics getRootAsDesiredPhysics(ByteBuffer _bb, DesiredPhysics obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DesiredPhysics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rlbot.flat.Vector3Partial location() { return location(new rlbot.flat.Vector3Partial()); }
  public rlbot.flat.Vector3Partial location(rlbot.flat.Vector3Partial obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rlbot.flat.RotatorPartial rotation() { return rotation(new rlbot.flat.RotatorPartial()); }
  public rlbot.flat.RotatorPartial rotation(rlbot.flat.RotatorPartial obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rlbot.flat.Vector3Partial velocity() { return velocity(new rlbot.flat.Vector3Partial()); }
  public rlbot.flat.Vector3Partial velocity(rlbot.flat.Vector3Partial obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rlbot.flat.Vector3Partial angularVelocity() { return angularVelocity(new rlbot.flat.Vector3Partial()); }
  public rlbot.flat.Vector3Partial angularVelocity(rlbot.flat.Vector3Partial obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDesiredPhysics(FlatBufferBuilder builder,
      int locationOffset,
      int rotationOffset,
      int velocityOffset,
      int angularVelocityOffset) {
    builder.startTable(4);
    DesiredPhysics.addAngularVelocity(builder, angularVelocityOffset);
    DesiredPhysics.addVelocity(builder, velocityOffset);
    DesiredPhysics.addRotation(builder, rotationOffset);
    DesiredPhysics.addLocation(builder, locationOffset);
    return DesiredPhysics.endDesiredPhysics(builder);
  }

  public static void startDesiredPhysics(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addOffset(0, locationOffset, 0); }
  public static void addRotation(FlatBufferBuilder builder, int rotationOffset) { builder.addOffset(1, rotationOffset, 0); }
  public static void addVelocity(FlatBufferBuilder builder, int velocityOffset) { builder.addOffset(2, velocityOffset, 0); }
  public static void addAngularVelocity(FlatBufferBuilder builder, int angularVelocityOffset) { builder.addOffset(3, angularVelocityOffset, 0); }
  public static int endDesiredPhysics(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DesiredPhysics get(int j) { return get(new DesiredPhysics(), j); }
    public DesiredPhysics get(DesiredPhysics obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DesiredPhysicsT unpack() {
    DesiredPhysicsT _o = new DesiredPhysicsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DesiredPhysicsT _o) {
    if (location() != null) _o.setLocation(location().unpack());
    else _o.setLocation(null);
    if (rotation() != null) _o.setRotation(rotation().unpack());
    else _o.setRotation(null);
    if (velocity() != null) _o.setVelocity(velocity().unpack());
    else _o.setVelocity(null);
    if (angularVelocity() != null) _o.setAngularVelocity(angularVelocity().unpack());
    else _o.setAngularVelocity(null);
  }
  public static int pack(FlatBufferBuilder builder, DesiredPhysicsT _o) {
    if (_o == null) return 0;
    int _location = _o.getLocation() == null ? 0 : rlbot.flat.Vector3Partial.pack(builder, _o.getLocation());
    int _rotation = _o.getRotation() == null ? 0 : rlbot.flat.RotatorPartial.pack(builder, _o.getRotation());
    int _velocity = _o.getVelocity() == null ? 0 : rlbot.flat.Vector3Partial.pack(builder, _o.getVelocity());
    int _angularVelocity = _o.getAngularVelocity() == null ? 0 : rlbot.flat.Vector3Partial.pack(builder, _o.getAngularVelocity());
    return createDesiredPhysics(
      builder,
      _location,
      _rotation,
      _velocity,
      _angularVelocity);
  }
}

