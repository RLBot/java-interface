// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A group of RenderMessages that are drawn and cleared together.
 * A RenderGroup will stay rendered until it is overriden or cleared.
 * The group is identified by a unique id.
 * A client can only clear its own RenderGroups.
 */
@SuppressWarnings("unused")
public final class RenderGroup extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static RenderGroup getRootAsRenderGroup(ByteBuffer _bb) { return getRootAsRenderGroup(_bb, new RenderGroup()); }
  public static RenderGroup getRootAsRenderGroup(ByteBuffer _bb, RenderGroup obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RenderGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The content of the RenderGroup.
   */
  public rlbot.flat.RenderMessage renderMessages(int j) { return renderMessages(new rlbot.flat.RenderMessage(), j); }
  public rlbot.flat.RenderMessage renderMessages(rlbot.flat.RenderMessage obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int renderMessagesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.RenderMessage.Vector renderMessagesVector() { return renderMessagesVector(new rlbot.flat.RenderMessage.Vector()); }
  public rlbot.flat.RenderMessage.Vector renderMessagesVector(rlbot.flat.RenderMessage.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The id of the RenderGroup.
   */
  public int id() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createRenderGroup(FlatBufferBuilder builder,
      int renderMessagesOffset,
      int id) {
    builder.startTable(2);
    RenderGroup.addId(builder, id);
    RenderGroup.addRenderMessages(builder, renderMessagesOffset);
    return RenderGroup.endRenderGroup(builder);
  }

  public static void startRenderGroup(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addRenderMessages(FlatBufferBuilder builder, int renderMessagesOffset) { builder.addOffset(0, renderMessagesOffset, 0); }
  public static int createRenderMessagesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRenderMessagesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(1, id, 0); }
  public static int endRenderGroup(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // render_messages
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RenderGroup get(int j) { return get(new RenderGroup(), j); }
    public RenderGroup get(RenderGroup obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RenderGroupT unpack() {
    RenderGroupT _o = new RenderGroupT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RenderGroupT _o) {
    rlbot.flat.RenderMessageT[] _oRenderMessages = new rlbot.flat.RenderMessageT[renderMessagesLength()];
    for (int _j = 0; _j < renderMessagesLength(); ++_j) {_oRenderMessages[_j] = (renderMessages(_j) != null ? renderMessages(_j).unpack() : null);}
    _o.setRenderMessages(_oRenderMessages);
    int _oId = id();
    _o.setId(_oId);
  }
  public static int pack(FlatBufferBuilder builder, RenderGroupT _o) {
    if (_o == null) return 0;
    int _renderMessages = 0;
    if (_o.getRenderMessages() != null) {
      int[] __renderMessages = new int[_o.getRenderMessages().length];
      int _j = 0;
      for (rlbot.flat.RenderMessageT _e : _o.getRenderMessages()) { __renderMessages[_j] = rlbot.flat.RenderMessage.pack(builder, _e); _j++;}
      _renderMessages = createRenderMessagesVector(builder, __renderMessages);
    }
    return createRenderGroup(
      builder,
      _renderMessages,
      _o.getId());
  }
}

