// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A RenderMessage for text in 3D space.
 */
@SuppressWarnings("unused")
public final class String3D extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static String3D getRootAsString3D(ByteBuffer _bb) { return getRootAsString3D(_bb, new String3D()); }
  public static String3D getRootAsString3D(ByteBuffer _bb, String3D obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public String3D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The text to be displayed.
   */
  public String text() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The position of the text.
   */
  public rlbot.flat.RenderAnchor anchor() { return anchor(new rlbot.flat.RenderAnchor()); }
  public rlbot.flat.RenderAnchor anchor(rlbot.flat.RenderAnchor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The scale of the text.
   * When scale is 1, the characters are 20 pixels tall and 10 pixels wide.
   */
  public float scale() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The color of the text.
   */
  public rlbot.flat.Color foreground() { return foreground(new rlbot.flat.Color()); }
  public rlbot.flat.Color foreground(rlbot.flat.Color obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The color of the background for the text.
   */
  public rlbot.flat.Color background() { return background(new rlbot.flat.Color()); }
  public rlbot.flat.Color background(rlbot.flat.Color obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The horizontal alignment of the text.
   */
  public int hAlign() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The vertical alignment of the text.
   */
  public int vAlign() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static void startString3D(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(0, textOffset, 0); }
  public static void addAnchor(FlatBufferBuilder builder, int anchorOffset) { builder.addOffset(1, anchorOffset, 0); }
  public static void addScale(FlatBufferBuilder builder, float scale) { builder.addFloat(2, scale, 0.0f); }
  public static void addForeground(FlatBufferBuilder builder, int foregroundOffset) { builder.addStruct(3, foregroundOffset, 0); }
  public static void addBackground(FlatBufferBuilder builder, int backgroundOffset) { builder.addStruct(4, backgroundOffset, 0); }
  public static void addHAlign(FlatBufferBuilder builder, int hAlign) { builder.addByte(5, (byte) hAlign, (byte) 0); }
  public static void addVAlign(FlatBufferBuilder builder, int vAlign) { builder.addByte(6, (byte) vAlign, (byte) 0); }
  public static int endString3D(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // text
    builder.required(o, 6);  // anchor
    builder.required(o, 10);  // foreground
    builder.required(o, 12);  // background
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public String3D get(int j) { return get(new String3D(), j); }
    public String3D get(String3D obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public String3DT unpack() {
    String3DT _o = new String3DT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(String3DT _o) {
    String _oText = text();
    _o.setText(_oText);
    if (anchor() != null) _o.setAnchor(anchor().unpack());
    else _o.setAnchor(null);
    float _oScale = scale();
    _o.setScale(_oScale);
    if (foreground() != null) foreground().unpackTo(_o.getForeground());
    else _o.setForeground(null);
    if (background() != null) background().unpackTo(_o.getBackground());
    else _o.setBackground(null);
    int _oHAlign = hAlign();
    _o.setHAlign(_oHAlign);
    int _oVAlign = vAlign();
    _o.setVAlign(_oVAlign);
  }
  public static int pack(FlatBufferBuilder builder, String3DT _o) {
    if (_o == null) return 0;
    int _text = _o.getText() == null ? 0 : builder.createString(_o.getText());
    int _anchor = _o.getAnchor() == null ? 0 : rlbot.flat.RenderAnchor.pack(builder, _o.getAnchor());
    startString3D(builder);
    addText(builder, _text);
    addAnchor(builder, _anchor);
    addScale(builder, _o.getScale());
    addForeground(builder, rlbot.flat.Color.pack(builder, _o.getForeground()));
    addBackground(builder, rlbot.flat.Color.pack(builder, _o.getBackground()));
    addHAlign(builder, _o.getHAlign());
    addVAlign(builder, _o.getVAlign());
    return endString3D(builder);
  }
}

