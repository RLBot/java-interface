// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Static information about the field.
 * Sent to bots, scripts, etc. upon connecting.
 * Dynamic information is found in the GamePacket.
 */
@SuppressWarnings("unused")
public final class FieldInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static FieldInfo getRootAsFieldInfo(ByteBuffer _bb) { return getRootAsFieldInfo(_bb, new FieldInfo()); }
  public static FieldInfo getRootAsFieldInfo(ByteBuffer _bb, FieldInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FieldInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Static information about boost pads on the field.
   * The dynamic information is found in the GamePacket
   * The boost pads are ordered by y-coordinate and then x-coordinate.
   */
  public rlbot.flat.BoostPad boostPads(int j) { return boostPads(new rlbot.flat.BoostPad(), j); }
  public rlbot.flat.BoostPad boostPads(rlbot.flat.BoostPad obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int boostPadsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.BoostPad.Vector boostPadsVector() { return boostPadsVector(new rlbot.flat.BoostPad.Vector()); }
  public rlbot.flat.BoostPad.Vector boostPadsVector(rlbot.flat.BoostPad.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Information about the goals on the field.
   */
  public rlbot.flat.GoalInfo goals(int j) { return goals(new rlbot.flat.GoalInfo(), j); }
  public rlbot.flat.GoalInfo goals(rlbot.flat.GoalInfo obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int goalsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rlbot.flat.GoalInfo.Vector goalsVector() { return goalsVector(new rlbot.flat.GoalInfo.Vector()); }
  public rlbot.flat.GoalInfo.Vector goalsVector(rlbot.flat.GoalInfo.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFieldInfo(FlatBufferBuilder builder,
      int boostPadsOffset,
      int goalsOffset) {
    builder.startTable(2);
    FieldInfo.addGoals(builder, goalsOffset);
    FieldInfo.addBoostPads(builder, boostPadsOffset);
    return FieldInfo.endFieldInfo(builder);
  }

  public static void startFieldInfo(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addBoostPads(FlatBufferBuilder builder, int boostPadsOffset) { builder.addOffset(0, boostPadsOffset, 0); }
  public static int createBoostPadsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBoostPadsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGoals(FlatBufferBuilder builder, int goalsOffset) { builder.addOffset(1, goalsOffset, 0); }
  public static int createGoalsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGoalsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFieldInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // boost_pads
    builder.required(o, 6);  // goals
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FieldInfo get(int j) { return get(new FieldInfo(), j); }
    public FieldInfo get(FieldInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FieldInfoT unpack() {
    FieldInfoT _o = new FieldInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FieldInfoT _o) {
    rlbot.flat.BoostPadT[] _oBoostPads = new rlbot.flat.BoostPadT[boostPadsLength()];
    for (int _j = 0; _j < boostPadsLength(); ++_j) {_oBoostPads[_j] = (boostPads(_j) != null ? boostPads(_j).unpack() : null);}
    _o.setBoostPads(_oBoostPads);
    rlbot.flat.GoalInfoT[] _oGoals = new rlbot.flat.GoalInfoT[goalsLength()];
    for (int _j = 0; _j < goalsLength(); ++_j) {_oGoals[_j] = (goals(_j) != null ? goals(_j).unpack() : null);}
    _o.setGoals(_oGoals);
  }
  public static int pack(FlatBufferBuilder builder, FieldInfoT _o) {
    if (_o == null) return 0;
    int _boostPads = 0;
    if (_o.getBoostPads() != null) {
      int[] __boostPads = new int[_o.getBoostPads().length];
      int _j = 0;
      for (rlbot.flat.BoostPadT _e : _o.getBoostPads()) { __boostPads[_j] = rlbot.flat.BoostPad.pack(builder, _e); _j++;}
      _boostPads = createBoostPadsVector(builder, __boostPads);
    }
    int _goals = 0;
    if (_o.getGoals() != null) {
      int[] __goals = new int[_o.getGoals().length];
      int _j = 0;
      for (rlbot.flat.GoalInfoT _e : _o.getGoals()) { __goals[_j] = rlbot.flat.GoalInfo.pack(builder, _e); _j++;}
      _goals = createGoalsVector(builder, __goals);
    }
    return createFieldInfo(
      builder,
      _boostPads,
      _goals);
  }
}

