// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A RenderMessage for a rectangle in 2D space.
 * Note that the position and size is given in screen-space coordinates.
 */
@SuppressWarnings("unused")
public final class Rect2D extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Rect2D getRootAsRect2D(ByteBuffer _bb) { return getRootAsRect2D(_bb, new Rect2D()); }
  public static Rect2D getRootAsRect2D(ByteBuffer _bb, Rect2D obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Rect2D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Screen-space x coordinate such that x=0 is left edge and x=1 is right edge of window.
   */
  public float x() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Screen-space y coordinate such that y=0 is top edge and y=1 is bottom edge of window.
   */
  public float y() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Screen-space size such that width=0.1 is 10% of window width.
   */
  public float width() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Screen-space size such that height=0.1 is 10% of window height.
   */
  public float height() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Color of the rectangle.
   */
  public rlbot.flat.Color color() { return color(new rlbot.flat.Color()); }
  public rlbot.flat.Color color(rlbot.flat.Color obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The horizontal alignment of the rectangle.
   */
  public int hAlign() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The vertical alignment of the rectangle.
   */
  public int vAlign() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static void startRect2D(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addX(FlatBufferBuilder builder, float x) { builder.addFloat(0, x, 0.0f); }
  public static void addY(FlatBufferBuilder builder, float y) { builder.addFloat(1, y, 0.0f); }
  public static void addWidth(FlatBufferBuilder builder, float width) { builder.addFloat(2, width, 0.0f); }
  public static void addHeight(FlatBufferBuilder builder, float height) { builder.addFloat(3, height, 0.0f); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addStruct(4, colorOffset, 0); }
  public static void addHAlign(FlatBufferBuilder builder, int hAlign) { builder.addByte(5, (byte) hAlign, (byte) 0); }
  public static void addVAlign(FlatBufferBuilder builder, int vAlign) { builder.addByte(6, (byte) vAlign, (byte) 0); }
  public static int endRect2D(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 12);  // color
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Rect2D get(int j) { return get(new Rect2D(), j); }
    public Rect2D get(Rect2D obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public Rect2DT unpack() {
    Rect2DT _o = new Rect2DT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Rect2DT _o) {
    float _oX = x();
    _o.setX(_oX);
    float _oY = y();
    _o.setY(_oY);
    float _oWidth = width();
    _o.setWidth(_oWidth);
    float _oHeight = height();
    _o.setHeight(_oHeight);
    if (color() != null) color().unpackTo(_o.getColor());
    else _o.setColor(null);
    int _oHAlign = hAlign();
    _o.setHAlign(_oHAlign);
    int _oVAlign = vAlign();
    _o.setVAlign(_oVAlign);
  }
  public static int pack(FlatBufferBuilder builder, Rect2DT _o) {
    if (_o == null) return 0;
    startRect2D(builder);
    addX(builder, _o.getX());
    addY(builder, _o.getY());
    addWidth(builder, _o.getWidth());
    addHeight(builder, _o.getHeight());
    addColor(builder, rlbot.flat.Color.pack(builder, _o.getColor()));
    addHAlign(builder, _o.getHAlign());
    addVAlign(builder, _o.getVAlign());
    return endRect2D(builder);
  }
}

