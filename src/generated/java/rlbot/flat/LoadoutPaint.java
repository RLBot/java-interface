// automatically generated by the FlatBuffers compiler, do not modify

package rlbot.flat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Specification for 'painted' items. See https://wiki.rlbot.org/botmaking/bot-customization/
 */
@SuppressWarnings("unused")
public final class LoadoutPaint extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static LoadoutPaint getRootAsLoadoutPaint(ByteBuffer _bb) { return getRootAsLoadoutPaint(_bb, new LoadoutPaint()); }
  public static LoadoutPaint getRootAsLoadoutPaint(ByteBuffer _bb, LoadoutPaint obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LoadoutPaint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long carPaintId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long decalPaintId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long wheelsPaintId() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long boostPaintId() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long antennaPaintId() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long hatPaintId() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long trailsPaintId() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long goalExplosionPaintId() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createLoadoutPaint(FlatBufferBuilder builder,
      long carPaintId,
      long decalPaintId,
      long wheelsPaintId,
      long boostPaintId,
      long antennaPaintId,
      long hatPaintId,
      long trailsPaintId,
      long goalExplosionPaintId) {
    builder.startTable(8);
    LoadoutPaint.addGoalExplosionPaintId(builder, goalExplosionPaintId);
    LoadoutPaint.addTrailsPaintId(builder, trailsPaintId);
    LoadoutPaint.addHatPaintId(builder, hatPaintId);
    LoadoutPaint.addAntennaPaintId(builder, antennaPaintId);
    LoadoutPaint.addBoostPaintId(builder, boostPaintId);
    LoadoutPaint.addWheelsPaintId(builder, wheelsPaintId);
    LoadoutPaint.addDecalPaintId(builder, decalPaintId);
    LoadoutPaint.addCarPaintId(builder, carPaintId);
    return LoadoutPaint.endLoadoutPaint(builder);
  }

  public static void startLoadoutPaint(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addCarPaintId(FlatBufferBuilder builder, long carPaintId) { builder.addInt(0, (int) carPaintId, (int) 0L); }
  public static void addDecalPaintId(FlatBufferBuilder builder, long decalPaintId) { builder.addInt(1, (int) decalPaintId, (int) 0L); }
  public static void addWheelsPaintId(FlatBufferBuilder builder, long wheelsPaintId) { builder.addInt(2, (int) wheelsPaintId, (int) 0L); }
  public static void addBoostPaintId(FlatBufferBuilder builder, long boostPaintId) { builder.addInt(3, (int) boostPaintId, (int) 0L); }
  public static void addAntennaPaintId(FlatBufferBuilder builder, long antennaPaintId) { builder.addInt(4, (int) antennaPaintId, (int) 0L); }
  public static void addHatPaintId(FlatBufferBuilder builder, long hatPaintId) { builder.addInt(5, (int) hatPaintId, (int) 0L); }
  public static void addTrailsPaintId(FlatBufferBuilder builder, long trailsPaintId) { builder.addInt(6, (int) trailsPaintId, (int) 0L); }
  public static void addGoalExplosionPaintId(FlatBufferBuilder builder, long goalExplosionPaintId) { builder.addInt(7, (int) goalExplosionPaintId, (int) 0L); }
  public static int endLoadoutPaint(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LoadoutPaint get(int j) { return get(new LoadoutPaint(), j); }
    public LoadoutPaint get(LoadoutPaint obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public LoadoutPaintT unpack() {
    LoadoutPaintT _o = new LoadoutPaintT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(LoadoutPaintT _o) {
    long _oCarPaintId = carPaintId();
    _o.setCarPaintId(_oCarPaintId);
    long _oDecalPaintId = decalPaintId();
    _o.setDecalPaintId(_oDecalPaintId);
    long _oWheelsPaintId = wheelsPaintId();
    _o.setWheelsPaintId(_oWheelsPaintId);
    long _oBoostPaintId = boostPaintId();
    _o.setBoostPaintId(_oBoostPaintId);
    long _oAntennaPaintId = antennaPaintId();
    _o.setAntennaPaintId(_oAntennaPaintId);
    long _oHatPaintId = hatPaintId();
    _o.setHatPaintId(_oHatPaintId);
    long _oTrailsPaintId = trailsPaintId();
    _o.setTrailsPaintId(_oTrailsPaintId);
    long _oGoalExplosionPaintId = goalExplosionPaintId();
    _o.setGoalExplosionPaintId(_oGoalExplosionPaintId);
  }
  public static int pack(FlatBufferBuilder builder, LoadoutPaintT _o) {
    if (_o == null) return 0;
    return createLoadoutPaint(
      builder,
      _o.getCarPaintId(),
      _o.getDecalPaintId(),
      _o.getWheelsPaintId(),
      _o.getBoostPaintId(),
      _o.getAntennaPaintId(),
      _o.getHatPaintId(),
      _o.getTrailsPaintId(),
      _o.getGoalExplosionPaintId());
  }
}

